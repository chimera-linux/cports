From cd6749b10de0a476be660c890a40edcf91bc9bcd Mon Sep 17 00:00:00 2001
From: Philip Chimento <philip.chimento@gmail.com>
Date: Sun, 14 Jul 2024 22:24:55 -0700
Subject: [PATCH] js: Add gjs_debug_callable() debug function

This DRYs up a bunch of repeated code to debug the display ID of a
function.
---
 gi/function.cpp           | 15 ++++-----------
 gi/value.cpp              |  7 +------
 cjs/context.cpp           | 12 +++---------
 cjs/jsapi-util-string.cpp |  9 +++++++++
 cjs/jsapi-util.h          |  1 +
 5 files changed, 18 insertions(+), 26 deletions(-)

diff --git a/gi/function.cpp b/gi/function.cpp
index b89b18c90..35cd89d90 100644
--- a/gi/function.cpp
+++ b/gi/function.cpp
@@ -35,7 +35,6 @@
 #include <js/ValueArray.h>
 #include <js/Warnings.h>
 #include <jsapi.h>        // for HandleValueArray
-#include <jsfriendapi.h>  // for JS_GetObjectFunction
 #include <jspubtd.h>      // for JSProtoKey
 
 #include "gi/arg-cache.h"
@@ -390,12 +389,9 @@ void GjsCallbackTrampoline::callback_closure(GIArgument** args, void* result) {
                 gjs->exit_immediately(code);
 
             // Some other uncatchable exception, e.g. out of memory
-            JSFunction* fn = JS_GetObjectFunction(callable());
-            std::string descr =
-                fn ? "function " + gjs_debug_string(JS_GetFunctionDisplayId(fn))
-                   : "callable object " + gjs_debug_object(callable());
             g_error("Call to %s (%s.%s) terminated with uncatchable exception",
-                    descr.c_str(), m_info.ns(), m_info.name());
+                    gjs_debug_callable(callable()).c_str(), m_info.ns(),
+                    m_info.name());
         }
 
         // If the callback has a GError** argument, then make a GError from the
@@ -553,14 +549,11 @@ bool GjsCallbackTrampoline::callback_closure_inner(
             return false;
 
         if (!is_array) {
-            JSFunction* fn = JS_GetObjectFunction(callable());
-            std::string descr =
-                fn ? "function " + gjs_debug_string(JS_GetFunctionDisplayId(fn))
-                   : "callable object " + gjs_debug_object(callable());
             gjs_throw(context,
                       "Call to %s (%s.%s) returned unexpected value, expecting "
                       "an Array",
-                      descr.c_str(), m_info.ns(), m_info.name());
+                      gjs_debug_callable(callable()).c_str(), m_info.ns(),
+                      m_info.name());
             return false;
         }
 
diff --git a/gi/value.cpp b/gi/value.cpp
index 2e6c990d4..e0c6afd4d 100644
--- a/gi/value.cpp
+++ b/gi/value.cpp
@@ -28,7 +28,6 @@
 #include <js/ValueArray.h>
 #include <js/experimental/TypedData.h>
 #include <jsapi.h>  // for InformalValueTypeName, JS_Get...
-#include <jsfriendapi.h>  // for JS_GetObjectFunction
 
 #include "gi/arg-inl.h"
 #include "gi/arg.h"
@@ -381,12 +380,8 @@ void Gjs::Closure::marshal(GValue* return_value, unsigned n_param_values,
                 gjs->exit_immediately(code);
 
             // Some other uncatchable exception, e.g. out of memory
-            JSFunction* fn = JS_GetObjectFunction(callable());
-            std::string descr =
-                fn ? "function " + gjs_debug_string(JS_GetFunctionDisplayId(fn))
-                   : "callable object " + gjs_debug_object(callable());
             g_error("Call to %s terminated with uncatchable exception",
-                    descr.c_str());
+                    gjs_debug_callable(callable()).c_str());
         }
     }
 
diff --git a/cjs/context.cpp b/cjs/context.cpp
index 1190f2694..1b153899a 100644
--- a/cjs/context.cpp
+++ b/cjs/context.cpp
@@ -542,10 +542,8 @@ static bool on_context_module_rejected_log_exception(JSContext* cx,
                                                      JS::Value* vp) {
     JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
 
-    JSString* id =
-        JS_GetFunctionDisplayId(JS_GetObjectFunction(&args.callee()));
     gjs_debug(GJS_DEBUG_IMPORTER, "Module evaluation promise rejected: %s",
-              gjs_debug_string(id).c_str());
+              gjs_debug_callable(&args.callee()).c_str());
 
     JS::HandleValue error = args.get(0);
 
@@ -564,10 +562,8 @@ static bool on_context_module_resolved(JSContext* cx, unsigned argc,
                                        JS::Value* vp) {
     JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
 
-    JSString* id =
-        JS_GetFunctionDisplayId(JS_GetObjectFunction(&args.callee()));
     gjs_debug(GJS_DEBUG_IMPORTER, "Module evaluation promise resolved: %s",
-              gjs_debug_string(id).c_str());
+              gjs_debug_callable(&args.callee()).c_str());
 
     args.rval().setUndefined();
 
@@ -628,11 +624,9 @@ static void load_context_module(JSContext* cx, const char* uri,
         [](JSContext* cx, unsigned argc, JS::Value* vp) {
             JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
 
-            JSString* id =
-                JS_GetFunctionDisplayId(JS_GetObjectFunction(&args.callee()));
             gjs_debug(GJS_DEBUG_IMPORTER,
                       "Module evaluation promise rejected: %s",
-                      gjs_debug_string(id).c_str());
+                      gjs_debug_callable(&args.callee()).c_str());
 
             JS::HandleValue error = args.get(0);
             // Abort because this module is required.
diff --git a/cjs/jsapi-util-string.cpp b/cjs/jsapi-util-string.cpp
index 4b6dbffeb..3465f15fe 100644
--- a/cjs/jsapi-util-string.cpp
+++ b/cjs/jsapi-util-string.cpp
@@ -622,6 +622,15 @@ gjs_debug_object(JSObject * const obj)
     return out.str();
 }
 
+std::string gjs_debug_callable(JSObject* callable) {
+    if (JSFunction* fn = JS_GetObjectFunction(callable)) {
+        if (JSString* display_id = JS_GetFunctionDisplayId(fn))
+            return {"function " + gjs_debug_string(display_id)};
+        return {"unnamed function"};
+    }
+    return {"callable object " + gjs_debug_object(callable)};
+}
+
 std::string
 gjs_debug_value(JS::Value v)
 {
diff --git a/cjs/jsapi-util.h b/cjs/jsapi-util.h
index 20ff79866..60e2c6906 100644
--- a/cjs/jsapi-util.h
+++ b/cjs/jsapi-util.h
@@ -600,6 +600,7 @@ bool gjs_object_require_converted_property(JSContext       *context,
 [[nodiscard]] std::string gjs_debug_string(JSString* str);
 [[nodiscard]] std::string gjs_debug_symbol(JS::Symbol* const sym);
 [[nodiscard]] std::string gjs_debug_object(JSObject* obj);
+[[nodiscard]] std::string gjs_debug_callable(JSObject* callable);
 [[nodiscard]] std::string gjs_debug_value(JS::Value v);
 [[nodiscard]] std::string gjs_debug_id(jsid id);
 
-- 
GitLab

