From 21f709644699dca4014691d050ff08990023b6d3 Mon Sep 17 00:00:00 2001
From: q66 <q66@chimera-linux.org>
Date: Fri, 19 Jun 2020 16:42:24 +0200
Subject: [PATCH] Add posix-generic which uses gcc builtins instead of
 arch-specific assembly. We can then use this for all our archs.

Also make sure our CFLAGS/LDFLAGS are respected.

--- a/Make.linux
+++ b/Make.linux
@@ -4,12 +4,12 @@
 AS=as
 RANLIB=ranlib
 CC=cc
-CFLAGS=-Wall -Wno-missing-braces -Wno-parentheses -ggdb -I$(ROOT) -I$(ROOT)/include -I$(ROOT)/kern -c -D_THREAD_SAFE -DPTHREAD $(PTHREAD) `pkg-config --cflags libpipewire-0.3` -D_REENTRANT -O2
+override CFLAGS := -fno-strict-aliasing -Wall -Wno-missing-braces -Wno-parentheses -I$(ROOT) -I$(ROOT)/include -I$(ROOT)/kern -c -D_THREAD_SAFE -DPTHREAD $(PTHREAD) `pkg-config --cflags libpipewire-0.3` -D_REENTRANT $(CFLAGS)
 O=o
 OS=posix
 GUI=wl
-LDADD=-lwayland-client -lxkbcommon -ggdb -lm -lrt -lpipewire-0.3
-LDFLAGS=$(PTHREAD)
+LDADD=-lwayland-client -lxkbcommon -lm -lrt -lpipewire-0.3
+override LDFLAGS := $(PTHREAD) $(LDFLAGS)
 TARG=drawterm
 # AUDIO=none
 AUDIO=pipewire
@@ -17,5 +17,4 @@
 all: default
 
 libmachdep.a:
-	arch=`uname -m|sed 's/i.86/386/;s/Power Macintosh/power/; s/x86_64/amd64/; s/armv[567].*/arm/; s/aarch64/arm64/'`; \
-	(cd posix-$$arch &&  make)
+	(cd posix-generic && $(MAKE))
diff --git a/posix-generic/Makefile b/posix-generic/Makefile
new file mode 100644
index 0000000..970204e
--- /dev/null
+++ b/posix-generic/Makefile
@@ -0,0 +1,15 @@
+ROOT=..
+include ../Make.config
+LIB=../libmachdep.a
+
+OFILES=\
+	getcallerpc.$O\
+	tas.$O
+
+default: $(LIB)
+$(LIB): $(OFILES)
+	$(AR) r $(LIB) $(OFILES)
+	$(RANLIB) $(LIB)
+
+%.$O: %.c
+	$(CC) $(CFLAGS) $*.c
diff --git a/posix-generic/getcallerpc.c b/posix-generic/getcallerpc.c
new file mode 100644
index 0000000..3614c59
--- /dev/null
+++ b/posix-generic/getcallerpc.c
@@ -0,0 +1,8 @@
+#include "u.h"
+#include "libc.h"
+
+uintptr
+getcallerpc(void *a)
+{
+	return ((uintptr*)a)[-1];
+}
diff --git a/posix-generic/tas.c b/posix-generic/tas.c
new file mode 100644
index 0000000..289f747
--- /dev/null
+++ b/posix-generic/tas.c
@@ -0,0 +1,18 @@
+#include "u.h"
+#include "libc.h"
+
+int
+tas(int *x)
+{
+	/* use a gcc __atomic builtin */
+	int v = __atomic_exchange_n(x, 1, __ATOMIC_SEQ_CST);
+	switch(v) {
+	case 0:
+	case 1:
+		return v;
+	default:
+		print("canlock: corrupted 0x%lux\n", v);
+		return 1;
+	}
+}
+
-- 
2.27.0
