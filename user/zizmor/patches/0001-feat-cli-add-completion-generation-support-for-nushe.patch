From eaa0d31185a40b90c3e07761651cde892e42ce46 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?JC=20Gr=C3=BCnhage?= <jan.christian@gruenhage.xyz>
Date: Wed, 21 May 2025 17:58:55 +0200
Subject: [PATCH] feat(cli): add completion generation support for nushell
 (#838)

Co-authored-by: William Woodruff <william@yossarian.net>
---
 Cargo.lock                  | 11 +++++++++
 Cargo.toml                  |  1 +
 crates/zizmor/Cargo.toml    |  1 +
 crates/zizmor/src/main.rs   | 45 ++++++++++++++++++++++++++++++++++++-
 crates/zizmor/src/models.rs |  6 ++---
 docs/release-notes.md       |  4 ++++
 docs/snippets/help.txt      |  2 +-
 7 files changed, 64 insertions(+), 6 deletions(-)

diff --git a/Cargo.lock b/Cargo.lock
index 9100a54..715696e 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -354,6 +354,16 @@ dependencies = [
  "clap",
 ]
 
+[[package]]
+name = "clap_complete_nushell"
+version = "4.5.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c6a8b1593457dfc2fe539002b795710d022dc62a65bf15023f039f9760c7b18a"
+dependencies = [
+ "clap",
+ "clap_complete",
+]
+
 [[package]]
 name = "clap_derive"
 version = "4.5.32"
@@ -3604,6 +3614,7 @@ dependencies = [
  "clap",
  "clap-verbosity-flag",
  "clap_complete",
+ "clap_complete_nushell",
  "etcetera",
  "flate2",
  "github-actions-expressions",
diff --git a/Cargo.toml b/Cargo.toml
index 6bbc129..b9d0fcc 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -29,6 +29,7 @@ camino = "1.1.9"
 clap = "4.5.38"
 clap-verbosity-flag = { version = "3.0.2", default-features = false }
 clap_complete = "4.5.50"
+clap_complete_nushell = "4.5.5"
 etcetera = "0.10.0"
 flate2 = "1.1.1"
 http-cache-reqwest = "0.15.1"
diff --git a/crates/zizmor/Cargo.toml b/crates/zizmor/Cargo.toml
index 02d479a..eeccbb2 100644
--- a/crates/zizmor/Cargo.toml
+++ b/crates/zizmor/Cargo.toml
@@ -30,6 +30,7 @@ camino = { workspace = true, features = ["serde1"] }
 clap = { workspace = true, features = ["derive", "env"] }
 clap-verbosity-flag = { workspace = true, features = ["tracing"] }
 clap_complete.workspace = true
+clap_complete_nushell.workspace = true
 etcetera.workspace = true
 flate2.workspace = true
 github-actions-expressions.workspace = true
diff --git a/crates/zizmor/src/main.rs b/crates/zizmor/src/main.rs
index 6cef69a..2954bc9 100644
--- a/crates/zizmor/src/main.rs
+++ b/crates/zizmor/src/main.rs
@@ -10,6 +10,7 @@ use anyhow::{Context, Result, anyhow};
 use audit::{Audit, AuditLoadError};
 use camino::{Utf8Path, Utf8PathBuf};
 use clap::{CommandFactory, Parser, ValueEnum};
+use clap_complete::Generator;
 use clap_verbosity_flag::InfoLevel;
 use config::Config;
 use finding::{Confidence, Persona, Severity};
@@ -126,7 +127,7 @@ struct App {
 
     /// Generate tab completion scripts for the specified shell.
     #[arg(long, value_enum, value_name = "SHELL", exclusive = true)]
-    completions: Option<clap_complete::Shell>,
+    completions: Option<Shell>,
 
     /// Enable naches mode.
     #[arg(long, hide = true, env = "ZIZMOR_NACHES")]
@@ -142,6 +143,48 @@ struct App {
     inputs: Vec<String>,
 }
 
+/// Shell with auto-generated completion script available.
+#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq, ValueEnum)]
+#[allow(clippy::enum_variant_names)]
+enum Shell {
+    /// Bourne Again `SHell` (bash)
+    Bash,
+    /// Elvish shell
+    Elvish,
+    /// Friendly Interactive `SHell` (fish)
+    Fish,
+    /// Nushell
+    Nushell,
+    /// `PowerShell`
+    Powershell,
+    /// Z `SHell` (zsh)
+    Zsh,
+}
+
+impl Generator for Shell {
+    fn file_name(&self, name: &str) -> String {
+        match self {
+            Shell::Bash => clap_complete::shells::Bash.file_name(name),
+            Shell::Elvish => clap_complete::shells::Elvish.file_name(name),
+            Shell::Fish => clap_complete::shells::Fish.file_name(name),
+            Shell::Nushell => clap_complete_nushell::Nushell.file_name(name),
+            Shell::Powershell => clap_complete::shells::PowerShell.file_name(name),
+            Shell::Zsh => clap_complete::shells::Zsh.file_name(name),
+        }
+    }
+
+    fn generate(&self, cmd: &clap::Command, buf: &mut dyn std::io::Write) {
+        match self {
+            Shell::Bash => clap_complete::shells::Bash.generate(cmd, buf),
+            Shell::Elvish => clap_complete::shells::Elvish.generate(cmd, buf),
+            Shell::Fish => clap_complete::shells::Fish.generate(cmd, buf),
+            Shell::Nushell => clap_complete_nushell::Nushell.generate(cmd, buf),
+            Shell::Powershell => clap_complete::shells::PowerShell.generate(cmd, buf),
+            Shell::Zsh => clap_complete::shells::Zsh.generate(cmd, buf),
+        }
+    }
+}
+
 #[derive(Debug, Default, Copy, Clone, ValueEnum)]
 pub(crate) enum OutputFormat {
     /// cargo-style output.
diff --git a/crates/zizmor/src/models.rs b/crates/zizmor/src/models.rs
index 1cf7fb2..7306fb8 100644
--- a/crates/zizmor/src/models.rs
+++ b/crates/zizmor/src/models.rs
@@ -665,7 +665,7 @@ impl<'doc> Step<'doc> {
         // The steps's own `shell:` takes precedence, followed by the
         // job's default, followed by the entire workflow's default,
         // followed by the runner's default.
-        let shell = shell
+        shell
             .as_deref()
             .or_else(|| {
                 self.job()
@@ -679,9 +679,7 @@ impl<'doc> Step<'doc> {
                     .as_ref()
                     .and_then(|d| d.run.as_ref().and_then(|r| r.shell.as_deref()))
             })
-            .or_else(|| self.parent.runner_default_shell());
-
-        shell
+            .or_else(|| self.parent.runner_default_shell())
     }
 }
 
diff --git a/docs/release-notes.md b/docs/release-notes.md
index 699d9d4..c233a39 100644
--- a/docs/release-notes.md
+++ b/docs/release-notes.md
@@ -9,6 +9,10 @@ of `zizmor`.
 
 ## Next (UNRELEASED)
 
+### New Features ðŸŒˆ
+
+* `zizmor` now supports generating completions for Nushell (#838)
+
 ## v1.8.0
 
 ### Announcements ðŸ“£
diff --git a/docs/snippets/help.txt b/docs/snippets/help.txt
index e66fbfa..8e05728 100644
--- a/docs/snippets/help.txt
+++ b/docs/snippets/help.txt
@@ -45,7 +45,7 @@ Options:
       --strict-collection
           Fail instead of warning on syntax and schema errors in collected inputs
       --completions <SHELL>
-          Generate tab completion scripts for the specified shell [possible values: bash, elvish, fish, powershell, zsh]
+          Generate tab completion scripts for the specified shell [possible values: bash, elvish, fish, nushell, powershell, zsh]
   -h, --help
           Print help (see more with '--help')
   -V, --version
-- 
2.49.0

