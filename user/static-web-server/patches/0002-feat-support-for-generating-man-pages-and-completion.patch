From 3ff59bea7ae152ab0436b04f4e13afe832c58668 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jan=20Christian=20Gr=C3=BCnhage?=
 <jan.christian@gruenhage.xyz>
Date: Sun, 8 Sep 2024 21:28:40 +0200
Subject: [PATCH 2/2] feat: support for generating man pages and completions

Co-authored-by: Jose Quintana <joseluisquintana20@gmail.com>
---
 Cargo.lock                                    | 94 +++++++++++++++++++
 Cargo.toml                                    |  1 +
 .../content/features/man-pages-completions.md | 16 ++++
 docs/mkdocs.yml                               |  1 +
 src/bin/server.rs                             | 51 +++++++---
 src/settings/cli.rs                           | 23 ++++-
 src/settings/mod.rs                           |  2 -
 7 files changed, 167 insertions(+), 21 deletions(-)
 create mode 100644 docs/content/features/man-pages-completions.md

diff --git a/Cargo.lock b/Cargo.lock
index 5826ac7..6fd3cb1 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -247,6 +247,19 @@ version = "1.7.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "8318a53db07bb3f8dca91a600466bdb3f2eaadeedfdbcf02e1accbad9271ba50"
 
+[[package]]
+name = "carapace_spec_clap"
+version = "1.0.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9c1b382d0ea2f304c9dba34f746284c7b6d231db48eae53b36d1e6eda1aba402"
+dependencies = [
+ "clap",
+ "clap_complete",
+ "indexmap",
+ "serde",
+ "serde_yaml",
+]
+
 [[package]]
 name = "cc"
 version = "1.1.10"
@@ -295,6 +308,21 @@ dependencies = [
  "clap_derive",
 ]
 
+[[package]]
+name = "clap_allgen"
+version = "0.2.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "38b31337b55b534905114db35586730324e5dab9a01af7cf440db39723caeab4"
+dependencies = [
+ "carapace_spec_clap",
+ "clap",
+ "clap_complete",
+ "clap_complete_fig",
+ "clap_complete_nushell",
+ "clap_mangen",
+ "thiserror",
+]
+
 [[package]]
 name = "clap_builder"
 version = "4.5.15"
@@ -307,6 +335,35 @@ dependencies = [
  "strsim",
 ]
 
+[[package]]
+name = "clap_complete"
+version = "4.5.26"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "205d5ef6d485fa47606b98b0ddc4ead26eb850aaa86abfb562a94fb3280ecba0"
+dependencies = [
+ "clap",
+]
+
+[[package]]
+name = "clap_complete_fig"
+version = "4.5.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d494102c8ff3951810c72baf96910b980fb065ca5d3101243e6a8dc19747c86b"
+dependencies = [
+ "clap",
+ "clap_complete",
+]
+
+[[package]]
+name = "clap_complete_nushell"
+version = "4.5.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5fe32110e006bccf720f8c9af3fee1ba7db290c724eab61544e1d3295be3a40e"
+dependencies = [
+ "clap",
+ "clap_complete",
+]
+
 [[package]]
 name = "clap_derive"
 version = "4.5.13"
@@ -325,6 +382,16 @@ version = "0.7.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "1462739cb27611015575c0c11df5df7601141071f07518d56fcc1be504cbec97"
 
+[[package]]
+name = "clap_mangen"
+version = "0.2.23"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "f17415fd4dfbea46e3274fcd8d368284519b358654772afb700dc2e8d2b24eeb"
+dependencies = [
+ "clap",
+ "roff",
+]
+
 [[package]]
 name = "colorchoice"
 version = "1.0.2"
@@ -717,6 +784,7 @@ checksum = "93ead53efc7ea8ed3cfb0c79fc8023fbb782a5432b52830b6518941cebe6505c"
 dependencies = [
  "equivalent",
  "hashbrown",
+ "serde",
 ]
 
 [[package]]
@@ -1135,6 +1203,12 @@ dependencies = [
  "windows-sys",
 ]
 
+[[package]]
+name = "roff"
+version = "0.2.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "88f8660c1ff60292143c98d08fc6e2f654d722db50410e3f3797d40baaf9d8f3"
+
 [[package]]
 name = "rustc-demangle"
 version = "0.1.24"
@@ -1256,6 +1330,19 @@ dependencies = [
  "serde",
 ]
 
+[[package]]
+name = "serde_yaml"
+version = "0.9.34+deprecated"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "6a8b1a1a2ebf674015cc02edccce75287f1a0130d394307b36743c2f5d504b47"
+dependencies = [
+ "indexmap",
+ "itoa",
+ "ryu",
+ "serde",
+ "unsafe-libyaml",
+]
+
 [[package]]
 name = "sha1"
 version = "0.10.6"
@@ -1363,6 +1450,7 @@ dependencies = [
  "bytes",
  "chrono",
  "clap",
+ "clap_allgen",
  "form_urlencoded",
  "futures-util",
  "globset",
@@ -1748,6 +1836,12 @@ version = "0.2.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "f962df74c8c05a667b5ee8bcf162993134c104e96440b663c8daa176dc772d8c"
 
+[[package]]
+name = "unsafe-libyaml"
+version = "0.2.11"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "673aac59facbab8a9007c7f6108d11f63b603f7cabff99fabf650fea5c32b861"
+
 [[package]]
 name = "untrusted"
 version = "0.9.0"
diff --git a/Cargo.toml b/Cargo.toml
index c8f1972..de9d7ce 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -67,6 +67,7 @@ bcrypt = { version = "0.15", optional = true }
 bytes = "1.6"
 chrono = { version = "0.4", default-features = false, features = ["std", "clock"], optional = true }
 clap = { version = "4.5", features = ["derive", "env"] }
+clap_allgen = "0.2.0"
 form_urlencoded = "1.2"
 futures-util = { version = "0.3", default-features = false }
 globset = { version = "0.4", features = ["serde1"] }
diff --git a/docs/content/features/man-pages-completions.md b/docs/content/features/man-pages-completions.md
new file mode 100644
index 0000000..b4f650e
--- /dev/null
+++ b/docs/content/features/man-pages-completions.md
@@ -0,0 +1,16 @@
+# Generated CLI documentation
+**`SWS`** is capable of generating documentation for its command line interface in the form of man pages and shell completions.
+
+You can generate completions for these shells and completion engines using `static-web-server generate --completions <output_path>`:
+- bash
+- carapace
+- elvish
+- fig
+- fish
+- nushell
+- powershell
+- zsh
+
+You can generate man pages using `static-web-server generate --man-pages <output_path>`.
+
+Finally, if you want both to be generated, you can just use `static-web-server generate <output_path>` without specifying `--completions` or `--man-pages`.
diff --git a/docs/mkdocs.yml b/docs/mkdocs.yml
index 5d4decd..2a769b8 100644
--- a/docs/mkdocs.yml
+++ b/docs/mkdocs.yml
@@ -166,6 +166,7 @@ nav:
     - 'Multiple Index Files': 'features/multiple-index-files.md'
     - 'Maintenance Mode': 'features/maintenance-mode.md'
     - 'WebAssembly': 'features/webassembly.md'
+    - 'Man Pages and Shell Completions': 'features/man-pages-completions.md'
   - 'Platforms & Architectures': 'platforms-architectures.md'
   - 'Migrating from v1 to v2': 'migration.md'
   - 'Changelog v2 (stable)': 'https://github.com/static-web-server/static-web-server/blob/master/CHANGELOG.md'
diff --git a/src/bin/server.rs b/src/bin/server.rs
index 434265c..6316d53 100644
--- a/src/bin/server.rs
+++ b/src/bin/server.rs
@@ -8,7 +8,10 @@
 #![deny(rust_2018_idioms)]
 #![deny(dead_code)]
 
-use static_web_server::{Result, Settings};
+use static_web_server::{
+    settings::{cli::General, Commands},
+    Result, Settings,
+};
 
 fn main() -> Result {
     let opts = Settings::get(true)?;
@@ -17,25 +20,45 @@ fn main() -> Result {
         return static_web_server::settings::cli_output::display_version();
     }
 
-    #[cfg(windows)]
-    {
-        use static_web_server::settings::Commands;
-        use static_web_server::winservice;
-
-        if let Some(commands) = opts.general.commands {
-            match commands {
-                Commands::Install {} => {
-                    return winservice::install_service(&opts.general.config_file);
+    if let Some(commands) = opts.general.commands {
+        use static_web_server::server_info;
+
+        match commands {
+            #[cfg(windows)]
+            Commands::Install {} => {
+                return static_web_server::winservice::install_service(&opts.general.config_file);
+            }
+            #[cfg(windows)]
+            Commands::Uninstall {} => {
+                return static_web_server::winservice::uninstall_service();
+            }
+            Commands::Generate {
+                completions,
+                man_pages,
+                out_dir,
+            } => {
+                if completions || !man_pages {
+                    let mut comp_dir = out_dir.clone();
+                    comp_dir.push("completions");
+                    clap_allgen::render_shell_completions::<General>(&comp_dir)?;
+                    server_info!("wrote completions to {}", comp_dir.to_string_lossy());
                 }
-                Commands::Uninstall {} => {
-                    return winservice::uninstall_service();
+                if man_pages || !completions {
+                    let mut man_dir = out_dir.clone();
+                    man_dir.push("man");
+                    clap_allgen::render_manpages::<General>(&man_dir)?;
+                    server_info!("wrote man pages to {}", man_dir.to_string_lossy());
                 }
+                return Ok(());
             }
-        } else if opts.general.windows_service {
-            return winservice::run_server_as_service();
         }
     }
 
+    #[cfg(windows)]
+    if opts.general.windows_service {
+        return static_web_server::winservice::run_server_as_service();
+    }
+
     // Run the server by default
     static_web_server::Server::new(opts)?.run_standalone(None)?;
 
diff --git a/src/settings/cli.rs b/src/settings/cli.rs
index 42bf8d2..12b3610 100644
--- a/src/settings/cli.rs
+++ b/src/settings/cli.rs
@@ -525,10 +525,9 @@ pub struct General {
     /// Tell the web server to run in a Windows Service context. Note that the `install` subcommand will enable this option automatically.
     pub windows_service: bool,
 
-    // Windows commands
-    #[cfg(windows)]
+    // Subcommands
     #[command(subcommand)]
-    /// Subcommands to install or uninstall the SWS Windows Service.
+    /// Subcommands for additional maintenance tasks, like installing and uninstalling the SWS Windows Service and generation of completions and man pages
     pub commands: Option<Commands>,
 
     #[arg(
@@ -542,17 +541,31 @@ pub struct General {
     pub version: bool,
 }
 
-#[cfg(windows)]
 #[derive(Debug, clap::Subcommand)]
-/// Subcommands to install or uninstall the SWS Windows Service.
+/// Subcommands for additional maintenance tasks, like installing and uninstalling the SWS Windows Service and generation of completions and man pages
 pub enum Commands {
     /// Install a Windows Service for the web server.
+    #[cfg(windows)]
     #[command(name = "install")]
     Install {},
 
     /// Uninstall the current Windows Service.
+    #[cfg(windows)]
     #[command(name = "uninstall")]
     Uninstall {},
+
+    /// Generate man pages and shell completions
+    #[command(name = "generate")]
+    Generate {
+        /// Generate shell completions
+        #[arg(long)]
+        completions: bool,
+        /// Generate man pages
+        #[arg(long)]
+        man_pages: bool,
+        /// Path to write generated artifacts to
+        out_dir: PathBuf,
+    },
 }
 
 fn value_parser_pathbuf(s: &str) -> Result<PathBuf, String> {
diff --git a/src/settings/mod.rs b/src/settings/mod.rs
index 7666b29..f4bc3ad 100644
--- a/src/settings/mod.rs
+++ b/src/settings/mod.rs
@@ -20,7 +20,6 @@ pub mod cli;
 pub mod cli_output;
 pub mod file;
 
-#[cfg(windows)]
 pub use cli::Commands;
 
 use cli::General;
@@ -658,7 +657,6 @@ impl Settings {
                 // Windows-only options and commands
                 #[cfg(windows)]
                 windows_service,
-                #[cfg(windows)]
                 commands: opts.commands,
             },
             advanced: settings_advanced,
-- 
2.46.0

