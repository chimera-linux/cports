From c269b8fb226254823052ffcd3c9e5ee0aa5342fc Mon Sep 17 00:00:00 2001
From: Skurikhin Alexandr <37978981+askurihin@users.noreply.github.com>
Date: Thu, 11 Jan 2024 19:49:41 +0200
Subject: [PATCH] Add support for match statement (PEP 634) (#219)

Fixes #215
---
 astor/code_gen.py      |  79 +++++++++++-
 docs/changelog.rst     |   9 ++
 tests/test_code_gen.py | 282 +++++++++++++++++++++++++++++++++++++++++
 3 files changed, 369 insertions(+), 1 deletion(-)

diff --git a/astor/code_gen.py b/astor/code_gen.py
index c18d020..562ba15 100644
--- a/astor/code_gen.py
+++ b/astor/code_gen.py
@@ -169,6 +169,8 @@ def __init__(self, indent_with, add_line_information=False,
         result = self.result
         append = result.append
 
+        self.discard_numeric_delim_for_const = False
+
         def write(*params):
             """ self.write is a closure for performance (to reduce the number
                 of attribute lookups).
@@ -503,6 +505,77 @@ def visit_Raise(self, node):
             self.conditional_write(', ', node.inst)
             self.conditional_write(', ', node.tback)
 
+    # Match statement (introduced in Python 3.10)
+    def visit_Match(self, node):
+        self.discard_numeric_delim_for_const = True
+        self.statement(node, 'match ', node.subject, ':')
+        self.body(node.cases)
+        self.discard_numeric_delim_for_const = False
+
+    def visit_match_case(self, node):
+        self.statement(node, 'case ', node.pattern)
+        self.conditional_write(' if ', node.guard)
+        self.write(':')
+        self.body(node.body)
+
+    def visit_MatchSequence(self, node):
+        with self.delimit('[]'):
+            self.comma_list(node.patterns)
+
+    def visit_MatchValue(self, node):
+        self.write(node.value)
+
+    def visit_MatchSingleton(self, node):
+        self.write(str(node.value))
+
+    def visit_MatchStar(self, node):
+        self.write('*', node.name or '_')
+
+    def visit_MatchMapping(self, node):
+        with self.delimit('{}'):
+            for idx, (key, value) in enumerate(zip(node.keys, node.patterns)):
+                if key:
+                    set_precedence(Precedence.Comma, value)
+                self.write(', ' if idx else '',
+                           key if key else '',
+                           ': ' if key else '**', value)
+            if node.rest:
+                if node.keys:
+                    self.write(', ')
+                self.write('**', node.rest)
+
+    def visit_MatchAs(self, node):
+        if not node.pattern:
+            self.write(node.name or '_')
+        else:
+            self.write(node.pattern, ' as ', node.name)
+
+    def visit_MatchOr(self, node):
+        for idx, pattern in enumerate(node.patterns):
+            self.write(' | ' if idx else '', pattern)
+
+    def visit_MatchClass(self, node):
+        write = self.write
+        want_comma = []
+
+        def write_comma():
+            if want_comma:
+                write(', ')
+            else:
+                want_comma.append(True)
+
+        self.visit(node.cls)
+        with self.delimit('()'):
+            args = node.patterns
+            for arg in args:
+                write(write_comma, arg)
+
+            kwd_attrs = node.kwd_attrs
+            kwd_patterns = node.kwd_patterns
+
+            for key, value in zip(kwd_attrs, kwd_patterns):
+                write(write_comma, key, '=', value)
+
     # Expressions
 
     def visit_Attribute(self, node):
@@ -553,7 +626,9 @@ def visit_Constant(self, node):
         value = node.value
 
         if isinstance(value, (int, float, complex)):
-            with self.delimit(node):
+            with self.delimit(node) as delimiters:
+                if self.discard_numeric_delim_for_const:
+                    delimiters.discard = True
                 self._handle_numeric_constant(value)
         elif isinstance(value, str):
             self._handle_string_constant(node, node.value)
@@ -756,6 +831,8 @@ def visit_BoolOp(self, node):
 
     def visit_Compare(self, node):
         with self.delimit(node, node.ops[0]) as delimiters:
+            if self.discard_numeric_delim_for_const:
+                delimiters.discard = True
             set_precedence(delimiters.p + 1, node.left, *node.comparators)
             self.visit(node.left)
             for op, right in zip(node.ops, node.comparators):
diff --git a/docs/changelog.rst b/docs/changelog.rst
index d6f7761..6b7d359 100644
--- a/docs/changelog.rst
+++ b/docs/changelog.rst
@@ -5,6 +5,15 @@ Release Notes
 0.9.0 - in development
 ----------------------
 
+New features
+~~~~~~~~~~~~
+* Add support for Structural Pattern Matching, see :pep:`634` for more
+  details.
+  (Reported by avelican in `Issue 215`_ and contributed by Skurikhin Alexandr in `PR 219`_.)
+
+.. _`Issue 215`: https://github.com/berkerpeksag/astor/issues/215
+.. _`PR 219`: https://github.com/berkerpeksag/astor/pull/219
+
 Bug fixes
 ~~~~~~~~~
 
diff --git a/tests/test_code_gen.py b/tests/test_code_gen.py
index 6cc0f4c..a57ed22 100644
--- a/tests/test_code_gen.py
+++ b/tests/test_code_gen.py
@@ -641,6 +641,288 @@ def test_compile_types(self):
             if code.strip() != dsttxt.strip():
                 self.assertEqual('(%s)' % code.strip(), dsttxt.strip())
 
+    @unittest.skipUnless(sys.version_info >= (3, 10, 0),
+                         "match statement introduced in Python 3.10")
+    def test_match_sequence(self):
+        source = canonical("""
+            match command.split():
+                case ['quit']:
+                    ...
+                # sequence pattern
+                case [1 | 2]:
+                    ...
+                # group pattern
+                case (1 | 2):
+                    ...
+        """)
+        target = canonical("""
+            match command.split():
+                case ['quit']:
+                    ...
+                case [1 | 2]:
+                    ...
+                case 1 | 2:
+                    ...
+        """)
+        self.assertAstEqualsSource(ast.parse(source), target)
+
+    @unittest.skipUnless(sys.version_info >= (3, 10, 0),
+                         "match statement introduced in Python 3.10")
+    def test_match_sequence_brackets(self):
+        # There is no way to tell if brackets or parentheses were used
+        # from the AST. Syntactically they are identical.
+        source = canonical("""
+            match point:
+                case (Point(x1, y1), Point(x2, y2) as p2):
+                    ...
+                case [Point(x1, y1), Point(x2, y2) as p2]:
+                    ...
+
+        """)
+        target = canonical("""
+            match point:
+                case [Point(x1, y1), Point(x2, y2) as p2]:
+                    ...
+                case [Point(x1, y1), Point(x2, y2) as p2]:
+                    ...
+        """)
+        self.assertAstEqualsSource(ast.parse(source), target)
+
+    @unittest.skipUnless(sys.version_info >= (3, 10, 0),
+                         "match statement introduced in Python 3.10")
+    def test_match_singleton(self):
+        source = canonical("""
+            match x:
+                case 1:
+                    print('Goodbye!')
+                    quit_game()
+        """)
+        target = canonical("""
+            match x:
+                case 1:
+                    print('Goodbye!')
+                    quit_game()
+        """)
+        self.assertAstEqualsSource(ast.parse(source), target)
+
+
+    @unittest.skipUnless(sys.version_info >= (3, 10, 0),
+                         "match statement introduced in Python 3.10")
+    def test_match_star(self):
+        source = canonical("""
+            match x:
+                case [1, 2, *rest]:
+                    print('Goodbye!')
+                    quit_game()
+                case [*_]:
+                    return 'seq'
+        """)
+        target = canonical("""
+            match x:
+                case [1, 2, *rest]:
+                    print('Goodbye!')
+                    quit_game()
+                case [*_]:
+                    return 'seq'
+        """)
+        self.assertAstEqualsSource(ast.parse(source), target)
+
+
+    @unittest.skipUnless(sys.version_info >= (3, 10, 0),
+                         "match statement introduced in Python 3.10")
+    def test_match_mapping(self):
+        source = canonical("""
+            match x:
+                case {'text': message, 'color': c, **rest}:
+                    pass
+                case {1: _, 2: _}:
+                    print('You won!')
+                    win_game()
+                case {**rest}:
+                    print('You Lose!')
+                    lose_game()
+        """)
+        target = canonical("""
+            match x:
+                case {'text': message, 'color': c, **rest}:
+                    pass
+                case {1: _, 2: _}:
+                    print('You won!')
+                    win_game()
+                case {**rest}:
+                    print('You Lose!')
+                    lose_game()
+        """)
+        self.assertAstEqualsSource(ast.parse(source), target)
+
+    @unittest.skipUnless(sys.version_info >= (3, 10, 0),
+                         "match statement introduced in Python 3.10")
+    def test_match_class(self):
+        source = canonical("""
+            match point:
+                case Point(x=0, y=0):
+                    print('Origin')
+                case Point(x=0, y=y):
+                    print(f'Y={y}')
+                case Point(x=x, y=0):
+                    print(f'X={x}')
+                case Point(1, y=1):
+                    print('1, y=1')
+                case Point():
+                    print('Somewhere else')
+                case A.B.C.D:
+                    ...
+                case _:
+                    print('Not a point')
+        """)
+        target = canonical("""
+            match point:
+                case Point(x=0, y=0):
+                    print('Origin')
+                case Point(x=0, y=y):
+                    print(f'Y={y}')
+                case Point(x=x, y=0):
+                    print(f'X={x}')
+                case Point(1, y=1):
+                    print('1, y=1')
+                case Point():
+                    print('Somewhere else')
+                case A.B.C.D:
+                    ...
+                case _:
+                    print('Not a point')
+        """)
+        self.assertAstEqualsSource(ast.parse(source), target)
+
+    @unittest.skipUnless(sys.version_info >= (3, 10, 0),
+                         "match statement introduced in Python 3.10")
+    def test_match_guard(self):
+        source = canonical("""
+            match point:
+                case Point(x, y) if x == y:
+                    print(f'Y=X at {x}')
+                case Point(x, y) if x in (1, 2, 3):
+                    print(f'Not on the diagonal')
+                case Point(x, y) if (x := x[:0]):
+                    ...
+
+        """)
+        target = canonical("""
+            match point:
+                case Point(x, y) if x == y:
+                    print(f'Y=X at {x}')
+                case Point(x, y) if x in (1, 2, 3):
+                    print(f'Not on the diagonal')
+                case Point(x, y) if (x := x[:0]):
+                    ...
+        """)
+        self.assertAstEqualsSource(ast.parse(source), target)
+
+    @unittest.skipUnless(sys.version_info >= (3, 10, 0),
+                         "match statement introduced in Python 3.10")
+    def test_match_capture(self):
+        # For now there is no way to check if there were parentheses around
+        # pattern or not, syntactically they are identical
+        source = canonical("""
+            match point:
+                case [Point(x1, y1), Point(x2, y2) as p2]:
+                    print('p2')
+                case (0 as z) | (1 as z) | (2 as z):
+                    ...
+
+        """)
+        target = canonical("""
+            match point:
+                case [Point(x1, y1), Point(x2, y2) as p2]:
+                    print('p2')
+                case 0 as z | 1 as z | 2 as z:
+                    ...
+        """)
+        self.assertAstEqualsSource(ast.parse(source), target)
+
+    @unittest.skipUnless(sys.version_info >= (3, 10, 0),
+                         "match statement introduced in Python 3.10")
+    def test_match_or(self):
+        source = canonical("""
+            match point:
+                case [x] | y:
+                    ...
+                case [x, y] | [z]:
+                    ...
+                case [x] as y:
+                    ...
+                case {0: [1, 2, {}] | True} | {1: [[]]} | {0: [1, 2, {}]} | [] | 'X' | {}:
+                    ...
+        """)
+        target = canonical("""
+            match point:
+                case [x] | y:
+                    ...
+                case [x, y] | [z]:
+                    ...
+                case [x] as y:
+                    ...
+                case {0: [1, 2, {}] | True} | {1: [[]]} | {0: [1, 2, {}]} | [] | 'X' | {}:
+                    ...
+        """)
+        self.assertAstEqualsSource(ast.parse(source), target)
+
+    @unittest.skipUnless(sys.version_info >= (3, 10, 0),
+                         "match statement introduced in Python 3.10")
+    def test_match_nested(self):
+        source = canonical("""
+            match match:
+                case case:
+                    match match:
+                        case case:
+                            pass
+        """)
+        target = canonical("""
+            match match:
+                case case:
+                    match match:
+                        case case:
+                            pass
+        """)
+        self.assertAstEqualsSource(ast.parse(source), target)
+
+    @unittest.skipUnless(sys.version_info >= (3, 10, 0),
+                         "match statement introduced in Python 3.10")
+    def test_match_call(self):
+        source = canonical("""
+            match Seq():
+                case bool(z):
+                    y = 0
+            match [match.group('grade'), match.group('material')]:
+                case ['MD' | 'HD', 'SS' as code]:
+                    print('You will get here')
+        """)
+        target = canonical("""
+            match Seq():
+                case bool(z):
+                    y = 0
+            match [match.group('grade'), match.group('material')]:
+                case ['MD' | 'HD', 'SS' as code]:
+                    print('You will get here')
+        """)
+        self.assertAstEqualsSource(ast.parse(source), target)
+
+    @unittest.skipUnless(sys.version_info >= (3, 10, 0),
+                         "match statement introduced in Python 3.10")
+    def test_match_num(self):
+        source = canonical("""
+            match 3:
+                case 0 | 1 | 2 | 3:
+                    1
+
+        """)
+        target = canonical("""
+            match 3:
+                case 0 | 1 | 2 | 3:
+                    1
+        """)
+        self.assertAstEqualsSource(ast.parse(source), target)
+
     def test_unicode_literals(self):
         source = """
         from __future__ import (print_function, unicode_literals)
