Patch-Source: https://phabricator.services.mozilla.com/D205660#inline-1138354
--
diff --git a/dom/events/EventStateManager.h b/dom/events/EventStateManager.h
--- a/dom/events/EventStateManager.h
+++ b/dom/events/EventStateManager.h
@@ -71,11 +71,12 @@
     // Store the first "over" event target we fire and don't refire "over" event
     // to that element while the first "over" event is still ongoing.
     mDispatchingOverEventTarget = aOverEventTarget;
     mDeepestEnterEventTargetIsOverEventTarget = true;
   }
-  void DidDispatchOverAndEnterEvent() { mDispatchingOverEventTarget = nullptr; }
+  void DidDispatchOverAndEnterEvent(
+      nsIContent* aOriginalOverTargetInComposedDoc);
   [[nodiscard]] bool IsDispatchingOverEventOn(
       nsIContent* aOverEventTarget) const {
     MOZ_ASSERT(aOverEventTarget);
     return mDeepestEnterEventTargetIsOverEventTarget &&
            mDeepestEnterEventTarget == aOverEventTarget;
diff --git a/dom/events/EventStateManager.cpp b/dom/events/EventStateManager.cpp
--- a/dom/events/EventStateManager.cpp
+++ b/dom/events/EventStateManager.cpp
@@ -356,10 +356,57 @@
            aContent.GetFlattenedTreeParent()));
   mDeepestEnterEventTarget = aContent.GetFlattenedTreeParent();
   mDeepestEnterEventTargetIsOverEventTarget = false;
 }
 
+void OverOutElementsWrapper::DidDispatchOverAndEnterEvent(
+    nsIContent* aOriginalOverTargetInComposedDoc) {
+  mDispatchingOverEventTarget = nullptr;
+
+  // Pointer Events define that once the `pointerover` event target is removed
+  // from the tree, `pointerout` should not be fired on that and the closest
+  // connected ancestor at the target removal should be kept as the deepest
+  // `pointerleave` target.  Therefore, we don't need the special handling for
+  // `pointerout` event target if the last `pointerover` target is temporarily
+  // removed from the tree.
+  if (mType == OverOutElementsWrapper::BoundaryEventType::Pointer) {
+    return;
+  }
+
+  // Assume that the caller checks whether aOriginalOverTarget is in the
+  // original document.  If we don't enable the strict mouse/pointer event
+  // boundary event dispatching by the pref (see below),
+  // mDeepestEnterEventTarget is set to nullptr when the last "over" target is
+  // removed.  Therefore, we cannot check whether aOriginalOverTarget is in the
+  // original document here.
+  if (!aOriginalOverTargetInComposedDoc) {
+    return;
+  }
+  MOZ_ASSERT_IF(mDeepestEnterEventTarget,
+                mDeepestEnterEventTarget->GetComposedDoc() ==
+                    aOriginalOverTargetInComposedDoc->GetComposedDoc());
+  // If the "mouseover" event target is removed temporarily while we're
+  // dispatching "mouseover" and "mouseenter" events and the target gets back
+  // under the deepest enter event target, we should restore the "mouseover"
+  // target.
+  if ((!StaticPrefs::
+           dom_events_mouse_pointer_boundary_keep_enter_targets_after_over_target_removed() &&
+       !mDeepestEnterEventTarget) ||
+      (!mDeepestEnterEventTargetIsOverEventTarget && mDeepestEnterEventTarget &&
+       nsContentUtils::ContentIsFlattenedTreeDescendantOf(
+           aOriginalOverTargetInComposedDoc, mDeepestEnterEventTarget))) {
+    mDeepestEnterEventTarget = aOriginalOverTargetInComposedDoc;
+    mDeepestEnterEventTargetIsOverEventTarget = true;
+    LogModule* const logModule = mType == BoundaryEventType::Mouse
+                                     ? sMouseBoundaryLog
+                                     : sPointerBoundaryLog;
+    MOZ_LOG(logModule, LogLevel::Info,
+            ("The \"over\" event target (%p) is restored",
+             mDeepestEnterEventTarget.get()));
+  }
+}
+
 /******************************************************************/
 /* mozilla::EventStateManager                                     */
 /******************************************************************/
 
 static uint32_t sESMInstanceCount = 0;
@@ -5058,12 +5105,15 @@
            isPointer ? "ePointerEnter" : "eMouseEnter",
            aContent ? ToString(*aContent).c_str() : "nullptr", aContent));
   enterDispatcher.Dispatch();
 
   MOZ_LOG(logModule, LogLevel::Info,
-          ("Dispatched \"over\" and \"enter\" events"));
-  wrapper->DidDispatchOverAndEnterEvent();
+          ("Dispatched \"over\" and \"enter\" events (the original \"over\" "
+           "event target was in the document %p, and now in %p)",
+           aContent->GetComposedDoc(), mDocument.get()));
+  wrapper->DidDispatchOverAndEnterEvent(
+      aContent->GetComposedDoc() == mDocument ? aContent : nullptr);
 }
 
 // Returns the center point of the window's client area. This is
 // in widget coordinates, i.e. relative to the widget's top-left
 // corner, not in screen coordinates, the same units that UIEvent::
