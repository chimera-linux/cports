Patch-Source: https://phabricator.services.mozilla.com/D205659
--
diff --git a/dom/events/EventStateManager.h b/dom/events/EventStateManager.h
--- a/dom/events/EventStateManager.h
+++ b/dom/events/EventStateManager.h
@@ -54,14 +54,15 @@
 class RemoteDragStartData;
 
 }  // namespace dom
 
 class OverOutElementsWrapper final : public nsISupports {
-  ~OverOutElementsWrapper();
+  ~OverOutElementsWrapper() = default;
 
  public:
-  OverOutElementsWrapper();
+  enum class BoundaryEventType : bool { Mouse, Pointer };
+  explicit OverOutElementsWrapper(BoundaryEventType aType) : mType(aType) {}
 
   NS_DECL_CYCLE_COLLECTING_ISUPPORTS
   NS_DECL_CYCLE_COLLECTION_CLASS(OverOutElementsWrapper)
 
   void ContentRemoved(nsIContent& aContent);
@@ -133,10 +134,12 @@
   // While we're dispatching "out" and/or "leave" events, this is set to the
   // "out" event target or the deepest leave event target.  If it's removed from
   // the DOM tree, this is set to nullptr.
   nsCOMPtr<nsIContent> mDispatchingOutOrDeepestLeaveEventTarget;
 
+  const BoundaryEventType mType;
+
   // Once the last "over" element is removed from the tree, this is set
   // to false.  Then, mDeepestEnterEventTarget may be an ancestor of the
   // "over" element which should be the deepest target of next "leave"
   // element but shouldn't be target of "out" event.
   bool mDeepestEnterEventTargetIsOverEventTarget = true;
diff --git a/dom/events/EventStateManager.cpp b/dom/events/EventStateManager.cpp
--- a/dom/events/EventStateManager.cpp
+++ b/dom/events/EventStateManager.cpp
@@ -225,10 +225,13 @@
   }
 
   return parent;
 }
 
+LazyLogModule sMouseBoundaryLog("MouseBoundaryEvents");
+LazyLogModule sPointerBoundaryLog("PointerBoundaryEvents");
+
 /******************************************************************/
 /* mozilla::UITimerCallback                                       */
 /******************************************************************/
 
 class UITimerCallback final : public nsITimerCallback, public nsINamed {
@@ -280,24 +283,83 @@
 
 /******************************************************************/
 /* mozilla::OverOutElementsWrapper                                */
 /******************************************************************/
 
-OverOutElementsWrapper::OverOutElementsWrapper() : mLastOverFrame(nullptr) {}
-
-OverOutElementsWrapper::~OverOutElementsWrapper() = default;
-
 NS_IMPL_CYCLE_COLLECTION(OverOutElementsWrapper, mDeepestEnterEventTarget,
                          mDispatchingOverEventTarget,
                          mDispatchingOutOrDeepestLeaveEventTarget)
 NS_IMPL_CYCLE_COLLECTING_ADDREF(OverOutElementsWrapper)
 NS_IMPL_CYCLE_COLLECTING_RELEASE(OverOutElementsWrapper)
 
 NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION(OverOutElementsWrapper)
   NS_INTERFACE_MAP_ENTRY(nsISupports)
 NS_INTERFACE_MAP_END
 
+void OverOutElementsWrapper::ContentRemoved(nsIContent& aContent) {
+  if (!mDeepestEnterEventTarget) {
+    return;
+  }
+
+  if (!nsContentUtils::ContentIsFlattenedTreeDescendantOf(
+          mDeepestEnterEventTarget, &aContent)) {
+    return;
+  }
+
+  LogModule* const logModule = mType == BoundaryEventType::Mouse
+                                   ? sMouseBoundaryLog
+                                   : sPointerBoundaryLog;
+
+  if (!StaticPrefs::
+          dom_events_mouse_pointer_boundary_keep_enter_targets_after_over_target_removed()) {
+    MOZ_LOG(logModule, LogLevel::Info,
+            ("The last \"over\" event target (%p) is removed",
+             mDeepestEnterEventTarget.get()));
+    mDeepestEnterEventTarget = nullptr;
+    return;
+  }
+
+  if (mDispatchingOverEventTarget &&
+      (mDeepestEnterEventTarget == mDispatchingOverEventTarget ||
+       nsContentUtils::ContentIsFlattenedTreeDescendantOf(
+           mDispatchingOverEventTarget, &aContent))) {
+    if (mDispatchingOverEventTarget ==
+        mDispatchingOutOrDeepestLeaveEventTarget) {
+      MOZ_LOG(logModule, LogLevel::Info,
+              ("The dispatching \"%s\" event target (%p) is removed",
+               mDeepestEnterEventTargetIsOverEventTarget ? "out" : "leave",
+               mDispatchingOutOrDeepestLeaveEventTarget.get()));
+      mDispatchingOutOrDeepestLeaveEventTarget = nullptr;
+    }
+    MOZ_LOG(logModule, LogLevel::Info,
+            ("The dispatching \"over\" event target (%p) is removed",
+             mDispatchingOverEventTarget.get()));
+    mDispatchingOverEventTarget = nullptr;
+  }
+  if (mDispatchingOutOrDeepestLeaveEventTarget &&
+      (mDeepestEnterEventTarget == mDispatchingOutOrDeepestLeaveEventTarget ||
+       nsContentUtils::ContentIsFlattenedTreeDescendantOf(
+           mDispatchingOutOrDeepestLeaveEventTarget, &aContent))) {
+    MOZ_LOG(logModule, LogLevel::Info,
+            ("The dispatching \"%s\" event target (%p) is removed",
+             mDeepestEnterEventTargetIsOverEventTarget ? "out" : "leave",
+             mDispatchingOutOrDeepestLeaveEventTarget.get()));
+    mDispatchingOutOrDeepestLeaveEventTarget = nullptr;
+  }
+  MOZ_LOG(logModule, LogLevel::Info,
+          ("The last \"%s\" event target (%p) is removed and now the last "
+           "deepest enter target becomes %s(%p)",
+           mDeepestEnterEventTargetIsOverEventTarget ? "over" : "enter",
+           mDeepestEnterEventTarget.get(),
+           aContent.GetFlattenedTreeParent()
+               ? ToString(*aContent.GetFlattenedTreeParent()).c_str()
+               : "nullptr",
+           aContent.GetFlattenedTreeParent()));
+  mDeepestEnterEventTarget = aContent.GetFlattenedTreeParent();
+  mDeepestEnterEventTargetIsOverEventTarget = false;
+}
+
 /******************************************************************/
 /* mozilla::EventStateManager                                     */
 /******************************************************************/
 
 static uint32_t sESMInstanceCount = 0;
@@ -4807,10 +4869,14 @@
   EventMessage mEventMessage;
 };
 
 void EventStateManager::NotifyMouseOut(WidgetMouseEvent* aMouseEvent,
                                        nsIContent* aMovingInto) {
+  const bool isPointer = aMouseEvent->mClass == ePointerEventClass;
+  LogModule* const logModule =
+      isPointer ? sPointerBoundaryLog : sMouseBoundaryLog;
+
   RefPtr<OverOutElementsWrapper> wrapper = GetWrapperByEventID(aMouseEvent);
 
   // If there is no deepest "leave" event target, that means the last "over"
   // target has already been removed from the tree.  Therefore, checking only
   // the "leave" event target is enough.
@@ -4820,10 +4886,15 @@
   // Before firing "out" and/or "leave" events, check for recursion
   if (wrapper->IsDispatchingOutEventOnLastOverEventTarget()) {
     return;
   }
 
+  MOZ_LOG(logModule, LogLevel::Info,
+          ("NotifyMouseOut: the source event is %s (IsReal()=%s)",
+           ToChar(aMouseEvent->mMessage),
+           aMouseEvent->IsReal() ? "true" : "false"));
+
   // XXX If a content node is a container of remove content, it should be
   // replaced with them and its children should not be visible.  Therefore,
   // if the deepest "enter" target is not the last "over" target, i.e., the
   // last "over" target has been removed from the DOM tree, it means that the
   // child/descendant was not replaced by remote content.  So,
@@ -4833,10 +4904,14 @@
     if (BrowsingContext* bc = flo->GetExtantBrowsingContext()) {
       if (nsIDocShell* docshell = bc->GetDocShell()) {
         if (RefPtr<nsPresContext> presContext = docshell->GetPresContext()) {
           EventStateManager* kidESM = presContext->EventStateManager();
           // Not moving into any element in this subdocument
+          MOZ_LOG(logModule, LogLevel::Info,
+                  ("Notifying child EventStateManager (%p) of \"out\" "
+                   "event...",
+                   kidESM));
           kidESM->NotifyMouseOut(aMouseEvent, nullptr);
         }
       }
     }
   }
@@ -4850,11 +4925,10 @@
 
   // Don't touch hover state if aMovingInto is non-null.  Caller will update
   // hover state itself, and we have optimizations for hover switching between
   // two nearby elements both deep in the DOM tree that would be defeated by
   // switching the hover state to null here.
-  bool isPointer = aMouseEvent->mClass == ePointerEventClass;
   if (!aMovingInto && !isPointer) {
     // Unset :hover
     SetContentState(nullptr, ElementState::HOVER);
   }
 
@@ -4863,16 +4937,31 @@
       isPointer ? ePointerLeave : eMouseLeave);
 
   // "out" events hould be fired only when the deepest "leave" event target
   // is the last "over" event target.
   if (nsCOMPtr<nsIContent> outEventTarget = wrapper->GetOutEventTarget()) {
+    MOZ_LOG(logModule, LogLevel::Info,
+            ("Dispatching %s event to %s (%p)",
+             isPointer ? "ePointerOut" : "eMouseOut",
+             outEventTarget ? ToString(*outEventTarget).c_str() : "nullptr",
+             outEventTarget.get()));
     DispatchMouseOrPointerEvent(aMouseEvent,
                                 isPointer ? ePointerOut : eMouseOut,
                                 outEventTarget, aMovingInto);
   }
+
+  MOZ_LOG(logModule, LogLevel::Info,
+          ("Dispatching %s event to %s (%p) and its ancestors",
+           isPointer ? "ePointerLeave" : "eMouseLeave",
+           wrapper->GetDeepestLeaveEventTarget()
+               ? ToString(*wrapper->GetDeepestLeaveEventTarget()).c_str()
+               : "nullptr",
+           wrapper->GetDeepestLeaveEventTarget()));
   leaveDispatcher.Dispatch();
 
+  MOZ_LOG(logModule, LogLevel::Info,
+          ("Dispatched \"out\" and/or \"leave\" events"));
   wrapper->DidDispatchOutAndOrLeaveEvent();
 }
 
 void EventStateManager::RecomputeMouseEnterStateForRemoteFrame(
     Element& aElement) {
@@ -4888,10 +4977,14 @@
 
 void EventStateManager::NotifyMouseOver(WidgetMouseEvent* aMouseEvent,
                                         nsIContent* aContent) {
   NS_ASSERTION(aContent, "Mouse must be over something");
 
+  const bool isPointer = aMouseEvent->mClass == ePointerEventClass;
+  LogModule* const logModule =
+      isPointer ? sPointerBoundaryLog : sMouseBoundaryLog;
+
   RefPtr<OverOutElementsWrapper> wrapper = GetWrapperByEventID(aMouseEvent);
 
   // If we have next "out" event target and it's the new "over" target, we don't
   // need to dispatch "out" nor "enter" event.
   if (!wrapper || aContent == wrapper->GetOutEventTarget()) {
@@ -4901,19 +4994,28 @@
   // Before firing "over" and "enter" events, check for recursion
   if (wrapper->IsDispatchingOverEventOn(aContent)) {
     return;
   }
 
+  MOZ_LOG(logModule, LogLevel::Info,
+          ("NotifyMouseOver: the source event is %s (IsReal()=%s)",
+           ToChar(aMouseEvent->mMessage),
+           aMouseEvent->IsReal() ? "true" : "false"));
+
   // Check to see if we're a subdocument and if so update the parent
   // document's ESM state to indicate that the mouse is over the
   // content associated with our subdocument.
   EnsureDocument(mPresContext);
   if (Document* parentDoc = mDocument->GetInProcessParentDocument()) {
     if (nsCOMPtr<nsIContent> docContent = mDocument->GetEmbedderElement()) {
       if (PresShell* parentPresShell = parentDoc->GetPresShell()) {
         RefPtr<EventStateManager> parentESM =
             parentPresShell->GetPresContext()->EventStateManager();
+        MOZ_LOG(logModule, LogLevel::Info,
+                ("Notifying parent EventStateManager (%p) of \"over\" "
+                 "event...",
+                 parentESM.get()));
         parentESM->NotifyMouseOver(aMouseEvent, docContent);
       }
     }
   }
   // Firing the DOM event in the parent document could cause all kinds
@@ -4926,12 +5028,10 @@
   // DispatchMouseOrPointerEvent() call below, since NotifyMouseOut() resets it,
   // bug 298477.
   nsCOMPtr<nsIContent> deepestLeaveEventTarget =
       wrapper->GetDeepestLeaveEventTarget();
 
-  bool isPointer = aMouseEvent->mClass == ePointerEventClass;
-
   EnterLeaveDispatcher enterDispatcher(this, aContent, deepestLeaveEventTarget,
                                        aMouseEvent,
                                        isPointer ? ePointerEnter : eMouseEnter);
 
   if (!isPointer) {
@@ -4943,15 +5043,26 @@
   wrapper->WillDispatchOverAndEnterEvent(aContent);
 
   // Fire mouseover
   // XXX If aContent has already been removed from the DOM tree, what should we
   // do? At least, dispatching `mouseover` on it is odd.
+  MOZ_LOG(logModule, LogLevel::Info,
+          ("Dispatching %s event to %s (%p)",
+           isPointer ? "ePointerOver" : "eMoustOver",
+           aContent ? ToString(*aContent).c_str() : "nullptr", aContent));
   wrapper->mLastOverFrame = DispatchMouseOrPointerEvent(
       aMouseEvent, isPointer ? ePointerOver : eMouseOver, aContent,
       deepestLeaveEventTarget);
+
+  MOZ_LOG(logModule, LogLevel::Info,
+          ("Dispatching %s event to %s (%p) and its ancestors",
+           isPointer ? "ePointerEnter" : "eMouseEnter",
+           aContent ? ToString(*aContent).c_str() : "nullptr", aContent));
   enterDispatcher.Dispatch();
 
+  MOZ_LOG(logModule, LogLevel::Info,
+          ("Dispatched \"over\" and \"enter\" events"));
   wrapper->DidDispatchOverAndEnterEvent();
 }
 
 // Returns the center point of the window's client area. This is
 // in widget coordinates, i.e. relative to the widget's top-left
@@ -5139,15 +5250,17 @@
     WidgetMouseEvent* aEvent) {
   WidgetPointerEvent* pointer = aEvent->AsPointerEvent();
   if (!pointer) {
     MOZ_ASSERT(aEvent->AsMouseEvent() != nullptr);
     if (!mMouseEnterLeaveHelper) {
-      mMouseEnterLeaveHelper = new OverOutElementsWrapper();
+      mMouseEnterLeaveHelper = new OverOutElementsWrapper(
+          OverOutElementsWrapper::BoundaryEventType::Mouse);
     }
     return mMouseEnterLeaveHelper;
   }
-  return mPointersEnterLeaveHelper.GetOrInsertNew(pointer->pointerId);
+  return mPointersEnterLeaveHelper.GetOrInsertNew(
+      pointer->pointerId, OverOutElementsWrapper::BoundaryEventType::Pointer);
 }
 
 /* static */
 void EventStateManager::SetPointerLock(nsIWidget* aWidget,
                                        nsPresContext* aPresContext) {
@@ -6899,42 +7012,6 @@
   Init(index);
   return Abs(mMultiplierY[index]) >=
          MIN_MULTIPLIER_VALUE_ALLOWING_OVER_ONE_PAGE_SCROLL;
 }
 
-void OverOutElementsWrapper::ContentRemoved(nsIContent& aContent) {
-  if (!mDeepestEnterEventTarget) {
-    return;
-  }
-
-  if (!nsContentUtils::ContentIsFlattenedTreeDescendantOf(
-          mDeepestEnterEventTarget, &aContent)) {
-    return;
-  }
-
-  if (!StaticPrefs::
-          dom_events_mouse_pointer_boundary_keep_enter_targets_after_over_target_removed()) {
-    mDeepestEnterEventTarget = nullptr;
-    return;
-  }
-
-  if (mDispatchingOverEventTarget &&
-      (mDeepestEnterEventTarget == mDispatchingOverEventTarget ||
-       nsContentUtils::ContentIsFlattenedTreeDescendantOf(
-           mDispatchingOverEventTarget, &aContent))) {
-    if (mDispatchingOverEventTarget ==
-        mDispatchingOutOrDeepestLeaveEventTarget) {
-      mDispatchingOutOrDeepestLeaveEventTarget = nullptr;
-    }
-    mDispatchingOverEventTarget = nullptr;
-  }
-  if (mDispatchingOutOrDeepestLeaveEventTarget &&
-      (mDeepestEnterEventTarget == mDispatchingOutOrDeepestLeaveEventTarget ||
-       nsContentUtils::ContentIsFlattenedTreeDescendantOf(
-           mDispatchingOutOrDeepestLeaveEventTarget, &aContent))) {
-    mDispatchingOutOrDeepestLeaveEventTarget = nullptr;
-  }
-  mDeepestEnterEventTarget = aContent.GetFlattenedTreeParent();
-  mDeepestEnterEventTargetIsOverEventTarget = false;
-}
-
 }  // namespace mozilla

