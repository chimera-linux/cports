diff --git a/Cargo.lock b/Cargo.lock
index 438d97c..91a04c1 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -237,26 +237,6 @@ version = "1.0.9"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "af150ab688ff2122fcef229be89cb50dd66af9e01a4ff320cc137eecc9bacc38"
 
-[[package]]
-name = "jemalloc-sys"
-version = "0.5.4+5.3.0-patched"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "ac6c1946e1cea1788cbfde01c993b52a10e2da07f4bac608228d1bed20bfebf2"
-dependencies = [
- "cc",
- "libc",
-]
-
-[[package]]
-name = "jemallocator"
-version = "0.5.4"
-source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "a0de374a9f8e63150e6f5e8a60cc14c668226d7a347d8aee1a45766e3c4dd3bc"
-dependencies = [
- "jemalloc-sys",
- "libc",
-]
-
 [[package]]
 name = "jobserver"
 version = "0.1.27"
@@ -417,7 +397,6 @@ dependencies = [
  "bstr",
  "grep",
  "ignore",
- "jemallocator",
  "lexopt",
  "log",
  "serde",
diff --git a/Cargo.toml b/Cargo.toml
index 8a6266b..bcce5c9 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -59,9 +59,6 @@ serde_json = "1.0.23"
 termcolor = "1.1.0"
 textwrap = { version = "0.16.0", default-features = false }
 
-[target.'cfg(all(target_env = "musl", target_pointer_width = "64"))'.dependencies.jemallocator]
-version = "0.5.0"
-
 [dev-dependencies]
 serde = "1.0.77"
 serde_derive = "1.0.77"
diff --git a/crates/core/main.rs b/crates/core/main.rs
index 64f35ce..9e3a32e 100644
--- a/crates/core/main.rs
+++ b/crates/core/main.rs
@@ -16,29 +16,6 @@ mod haystack;
 mod logger;
 mod search;
 
-// Since Rust no longer uses jemalloc by default, ripgrep will, by default,
-// use the system allocator. On Linux, this would normally be glibc's
-// allocator, which is pretty good. In particular, ripgrep does not have a
-// particularly allocation heavy workload, so there really isn't much
-// difference (for ripgrep's purposes) between glibc's allocator and jemalloc.
-//
-// However, when ripgrep is built with musl, this means ripgrep will use musl's
-// allocator, which appears to be substantially worse. (musl's goal is not to
-// have the fastest version of everything. Its goal is to be small and amenable
-// to static compilation.) Even though ripgrep isn't particularly allocation
-// heavy, musl's allocator appears to slow down ripgrep quite a bit. Therefore,
-// when building with musl, we use jemalloc.
-//
-// We don't unconditionally use jemalloc because it can be nice to use the
-// system's default allocator by default. Moreover, jemalloc seems to increase
-// compilation times by a bit.
-//
-// Moreover, we only do this on 64-bit systems since jemalloc doesn't support
-// i686.
-#[cfg(all(target_env = "musl", target_pointer_width = "64"))]
-#[global_allocator]
-static ALLOC: jemallocator::Jemalloc = jemallocator::Jemalloc;
-
 /// Then, as it was, then again it will be.
 fn main() -> ExitCode {
     match run(flags::parse()) {
