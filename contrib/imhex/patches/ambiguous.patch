--- a/lib/third_party/HashLibPlus/Base/Hash.h
+++ b/lib/third_party/HashLibPlus/Base/Hash.h
@@ -214,7 +214,7 @@
 		{
 			if (a_length > -1)
 			{
-				if (UInt64(a_stream.tellg() + a_length) > size)
+				if (UInt64((UInt64)a_stream.tellg() + a_length) > size)
 					throw IndexOutOfRangeHashLibException(IndexOutOfRange);
 			} // end if
 
--- a/lib/third_party/jthread/jthread/source/stop_token.hpp
+++ b/lib/third_party/jthread/jthread/source/stop_token.hpp
@@ -26,11 +26,11 @@
 // internal types for shared stop state
 //-----------------------------------------------
 
-struct __stop_callback_base {
-  void(*__callback_)(__stop_callback_base*) = nullptr;
+struct stop_callback_base {
+  void(*__callback_)(stop_callback_base*) = nullptr;
 
-  __stop_callback_base* __next_ = nullptr;
-  __stop_callback_base** __prev_ = nullptr;
+  stop_callback_base* __next_ = nullptr;
+  stop_callback_base** __prev_ = nullptr;
   bool* __isRemoved_ = nullptr;
   std::atomic<bool> __callbackFinishedExecuting_{false};
 
@@ -41,10 +41,10 @@
  protected:
   // it shall only by us who deletes this
   // (workaround for virtual __execute() and destructor)
-  ~__stop_callback_base() = default;
+  ~stop_callback_base() = default;
 };
 
-struct __stop_state {
+struct stop_state {
  public:
   void __add_token_reference() noexcept {
     __state_.fetch_add(__token_ref_increment, std::memory_order_relaxed);
@@ -139,7 +139,7 @@
   }
 
   bool __try_add_callback(
-      __stop_callback_base* __cb,
+      stop_callback_base* __cb,
       bool __incrementRefCountIfSuccessful) noexcept {
     std::uint64_t __oldState;
     goto __load_state;
@@ -178,7 +178,7 @@
     return true;
   }
 
-  void __remove_callback(__stop_callback_base* __cb) noexcept {
+  void __remove_callback(stop_callback_base* __cb) noexcept {
     __lock();
 
     if (__cb->__prev_ != nullptr) {
@@ -299,7 +299,7 @@
   // bits 2-32 - token ref count (31 bits)
   // bits 33-63 - source ref count (31 bits)
   std::atomic<std::uint64_t> __state_{__source_ref_increment};
-  __stop_callback_base* __head_ = nullptr;
+  stop_callback_base* __head_ = nullptr;
   std::thread::id __signallingThread_{};
 };
 
@@ -391,13 +391,13 @@
   template <typename _Callback>
   friend class stop_callback;
 
-  explicit stop_token(__stop_state* __state) noexcept : __state_(__state) {
+  explicit stop_token(stop_state* __state) noexcept : __state_(__state) {
     if (__state_ != nullptr) {
       __state_->__add_token_reference();
     }
   }
 
-  __stop_state* __state_;
+  stop_state* __state_;
 };
 
 
@@ -407,7 +407,7 @@
 
 class stop_source {
  public:
-  stop_source() : __state_(new __stop_state()) {}
+  stop_source() : __state_(new stop_state()) {}
 
   explicit stop_source(nostopstate_t) noexcept : __state_(nullptr) {}
 
@@ -476,7 +476,7 @@
   }
 
  private:
-  __stop_state* __state_;
+  stop_state* __state_;
 };
 
 
@@ -486,7 +486,7 @@
 
 template <typename _Callback>
 // requires Destructible<_Callback> && Invocable<_Callback>
-class [[nodiscard]] stop_callback : private __stop_callback_base {
+class [[nodiscard]] stop_callback : private stop_callback_base {
  public:
   using callback_type = _Callback;
 
@@ -496,7 +496,7 @@
     // requires Constructible<Callback, C>
   explicit stop_callback(const stop_token& __token, _CB&& __cb) noexcept(
       std::is_nothrow_constructible_v<_Callback, _CB>)
-      : __stop_callback_base{[](__stop_callback_base *__that) noexcept {
+      : stop_callback_base{[](stop_callback_base *__that) noexcept {
           static_cast<stop_callback*>(__that)->__execute();
         }},
         __state_(nullptr),
@@ -513,7 +513,7 @@
     // requires Constructible<Callback, C>
   explicit stop_callback(stop_token&& __token, _CB&& __cb) noexcept(
       std::is_nothrow_constructible_v<_Callback, _CB>)
-      : __stop_callback_base{[](__stop_callback_base *__that) noexcept {
+      : stop_callback_base{[](stop_callback_base *__that) noexcept {
           static_cast<stop_callback*>(__that)->__execute();
         }},
         __state_(nullptr),
@@ -553,7 +553,7 @@
 #endif
   }
 
-  __stop_state* __state_;
+  stop_state* __state_;
   _Callback __cb_;
 #ifdef SAFE
   std::atomic<bool> __inExecute_{false};
