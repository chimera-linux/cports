From 1eff29c3106d7c5d6fb317b33f19d01eb17491c6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jan=20Christian=20Gr=C3=BCnhage?=
 <jan.christian@gruenhage.xyz>
Date: Thu, 14 Mar 2024 21:46:39 +0100
Subject: [PATCH] replace deprecated chrono function

---
 src/cli/types.rs | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/src/cli/types.rs b/src/cli/types.rs
index b281792..044fd5b 100644
--- a/src/cli/types.rs
+++ b/src/cli/types.rs
@@ -979,13 +979,13 @@ impl Time {
                     return Ok(d.into());
                 }
             } else if let Ok(d) = chrono::NaiveDateTime::parse_from_str(s, *f) {
-                return Ok(DateTime::from_utc(d, Utc));
+                return Ok(DateTime::from_naive_utc_and_offset(d, Utc));
             }
         }
         for f in &["%Y-%m-%d", "%Y-%m", "%Y-%j", "%Y%m%d", "%Y%m", "%Y%j", "%Y"]
         {
             if let Ok(d) = chrono::NaiveDate::parse_from_str(s, *f) {
-                return Ok(DateTime::from_utc(d.and_time(pad_date_with), Utc));
+                return Ok(DateTime::from_naive_utc_and_offset(d.and_time(pad_date_with), Utc));
             }
         }
         Err(anyhow::anyhow!("Malformed ISO8601 timestamp: {}", s))
@@ -1061,13 +1061,13 @@ mod test {
 
     #[test]
     fn test_expiry_as_duration() {
-        let reference = DateTime::from_utc(
+        let reference = DateTime::from_naive_utc_and_offset(
             NaiveDateTime::from_timestamp_opt(1, 0).unwrap(),
             Utc,
         );
 
         let expiry = Expiry::Timestamp(
-            Time::try_from(DateTime::from_utc(
+            Time::try_from(DateTime::from_naive_utc_and_offset(
                 NaiveDateTime::from_timestamp_opt(2, 0).unwrap(),
                 Utc
             )).expect("valid"));
@@ -1088,12 +1088,12 @@ mod test {
 
     #[test]
     fn test_expiry_as_duration_errors() {
-        let reference = DateTime::from_utc(
+        let reference = DateTime::from_naive_utc_and_offset(
             NaiveDateTime::from_timestamp_opt(2, 0).unwrap(),
             Utc,
         );
         let expiry = Expiry::Timestamp(
-            Time::try_from(DateTime::from_utc(
+            Time::try_from(DateTime::from_naive_utc_and_offset(
                 NaiveDateTime::from_timestamp_opt(1, 0).unwrap(),
                 Utc
             )).expect("valid"));
-- 
2.44.0

