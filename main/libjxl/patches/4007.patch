From e94d8c9c496344e21910699cdf6ef1c150b39b00 Mon Sep 17 00:00:00 2001
From: Evgenii Kliuchnikov <eustas.ru@gmail.com>
Date: Wed, 11 Dec 2024 15:26:55 +0100
Subject: [PATCH] Fix for newer versions of OpenEXR

Newer versions of OpenEXR are doing "scratch" reads that can span befind end of file
(and thus misuse exceptions)

This PR adjusts our InMemoryIStream to fit OpenEXR expectations.
---
 lib/extras/codec_test.cc | 14 +++++++++-----
 lib/extras/dec/exr.cc    | 28 +++++++++++++++++++++-------
 2 files changed, 30 insertions(+), 12 deletions(-)

diff --git a/lib/extras/codec_test.cc b/lib/extras/codec_test.cc
index 6cbed220975e..c2b656bd6c2e 100644
--- a/lib/extras/codec_test.cc
+++ b/lib/extras/codec_test.cc
@@ -267,15 +267,19 @@ void TestRoundTrip(const TestImageParams& params, ThreadPool* pool) {
       params.codec, params.is_gray, params.add_alpha, params.bits_per_sample);
   printf("Codec %s %s\n", extension.c_str(), params.DebugString().c_str());
 
-  PackedPixelFile ppf_in;
-  CreateTestImage(params, &ppf_in);
-
-  EncodedImage encoded;
+  if (!CanDecode(params.codec)) {
+    fprintf(stderr, "Skipping test because of missing decoding support.\n");
+    return;
+  }
   auto encoder = Encoder::FromExtension(extension);
   if (!encoder) {
-    fprintf(stderr, "Skipping test because of missing codec support.\n");
+    fprintf(stderr, "Skipping test because of missing encoding support.\n");
     return;
   }
+
+  PackedPixelFile ppf_in;
+  CreateTestImage(params, &ppf_in);
+  EncodedImage encoded;
   ASSERT_TRUE(encoder->Encode(ppf_in, &encoded, pool));
   ASSERT_EQ(encoded.bitstreams.size(), 1);
 
diff --git a/lib/extras/dec/exr.cc b/lib/extras/dec/exr.cc
index 59edd63eb863..4213d8ec5773 100644
--- a/lib/extras/dec/exr.cc
+++ b/lib/extras/dec/exr.cc
@@ -41,10 +41,9 @@ Status DecodeImageEXR(Span<const uint8_t> bytes, const ColorHints& color_hints,
 #include <vector>
 
 #ifdef __EXCEPTIONS
-#include <stdexcept>
-#define JXL_EXR_THROW_LENGTH_ERROR() throw std::length_error("");
+#define JXL_EXR_THROW_LENGTH_ERROR(M) throw Iex::InputExc(M);
 #else  // __EXCEPTIONS
-#define JXL_EXR_THROW_LENGTH_ERROR() JXL_CRASH()
+#define JXL_EXR_THROW_LENGTH_ERROR(M) JXL_CRASH()
 #endif  // __EXCEPTIONS
 
 namespace jxl {
@@ -71,8 +70,11 @@ class InMemoryIStream : public OpenEXR::IStream {
 
   bool isMemoryMapped() const override { return true; }
   char* readMemoryMapped(const int n) override {
-    if (pos_ + n < pos_ || pos_ + n > bytes_.size()) {
-      JXL_EXR_THROW_LENGTH_ERROR();
+    if (pos_ + n < pos_) {
+      JXL_EXR_THROW_LENGTH_ERROR("Overflow");
+    }
+    if (pos_ + n > bytes_.size()) {
+      JXL_EXR_THROW_LENGTH_ERROR("Read past end of file");
     }
     char* const result =
         const_cast<char*>(reinterpret_cast<const char*>(bytes_.data() + pos_));
@@ -80,14 +82,26 @@ class InMemoryIStream : public OpenEXR::IStream {
     return result;
   }
   bool read(char c[], const int n) override {
-    std::copy_n(readMemoryMapped(n), n, c);
+    // That is not stated in documentation, but the OpenEXR code expects that
+    // when requested amount is not accessible and exception is thrown, all
+    // the accessible data is read.
+    if (pos_ + n < pos_) {
+      JXL_EXR_THROW_LENGTH_ERROR("Overflow");
+    }
+    if (pos_ + n > bytes_.size()) {
+      int can_read = static_cast<int>(bytes_.size() - pos_);
+      std::copy_n(readMemoryMapped(can_read), can_read, c);
+      JXL_EXR_THROW_LENGTH_ERROR("Read past end of file");
+    } else {
+      std::copy_n(readMemoryMapped(n), n, c);
+    }
     return pos_ < bytes_.size();
   }
 
   ExrInt64 tellg() override { return pos_; }
   void seekg(const ExrInt64 pos) override {
     if (pos >= bytes_.size()) {
-      JXL_EXR_THROW_LENGTH_ERROR();
+      JXL_EXR_THROW_LENGTH_ERROR("Seeks past end of file");
     }
     pos_ = pos;
   }
