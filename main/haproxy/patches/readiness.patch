diff --git a/doc/haproxy.1 b/doc/haproxy.1
index 4c2d78677..8ff7d2e9a 100644
--- a/doc/haproxy.1
+++ b/doc/haproxy.1
@@ -85,7 +85,7 @@ mode.
 
 .TP
 \fB\-Ws\fP
-Start in master-worker mode with systemd notify support. It tells systemd when
+Start in master-worker mode with fd notify support. It tells systemd when
 the process is ready. This mode forces foreground.
 
 .TP
diff --git a/src/cli.c b/src/cli.c
index a64ce8aa2..3a36a4b12 100644
--- a/src/cli.c
+++ b/src/cli.c
@@ -2529,8 +2529,20 @@ static int _send_status(char **args, char *payload, struct appctx *appctx, void
 	load_status = 1;
 	ha_notice("Loading success.\n");
 
-	if (global.tune.options & GTUNE_USE_SYSTEMD)
+	if (global.tune.options & GTUNE_USE_SYSTEMD) {
+	#if 0
 		sd_notifyf(0, "READY=1\nMAINPID=%lu\nSTATUS=Ready.\n", (unsigned long)getpid());
+	#else
+    const char *rvar = getenv("HAPROXY_READY_FD");
+    if (rvar && (global.mode & MODE_FOREGROUND)) {
+      int fdn = atoi(rvar);
+      if (fdn && !fcntl(fdn, F_GETFD)) {
+        write(fdn, "READY=1\n", sizeof("READY=1"));
+        close(fdn);
+      }
+    }
+	#endif
+  }
 	return 1;
 }
 
diff --git a/src/haproxy.c b/src/haproxy.c
index 06eaf61ff..5b93e8185 100644
--- a/src/haproxy.c
+++ b/src/haproxy.c
@@ -614,7 +614,7 @@ static void usage(char *name)
 		"        -V enters verbose mode (disables quiet mode)\n"
 		"        -D goes daemon ; -C changes to <dir> before loading files.\n"
 		"        -W master-worker mode.\n"
-		"        -Ws master-worker mode with systemd notify support.\n"
+		"        -Ws master-worker mode with fd notify support.\n"
 		"        -q quiet mode : don't display messages\n"
 		"        -c check mode : only check config files and exit\n"
 		"        -cc check condition : evaluate a condition and exit\n"
diff --git a/src/mworker.c b/src/mworker.c
index a5ceff707..d175a1d8b 100644
--- a/src/mworker.c
+++ b/src/mworker.c
@@ -504,10 +504,16 @@ static void mworker_on_new_child_failure()
 	usermsgs_clr(NULL);
 	load_status = 0;
 	ha_warning("Failed to load worker!\n");
+	#if 0
 	/* the sd_notify API is not able to send a reload failure signal. So
 	 * the READY=1 signal still need to be sent */
 	if (global.tune.options & GTUNE_USE_SYSTEMD)
 		sd_notify(0, "READY=1\nSTATUS=Reload failed!\n");
+	#else
+	/* the reexec is transparent to the supervisor and the fd that was
+	 * used for the notification is already gone, so do nothing here
+	 */
+	#endif
 }
 
 /*
