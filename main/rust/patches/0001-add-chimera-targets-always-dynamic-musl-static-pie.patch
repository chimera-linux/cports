From 7f873e1cc6f9193a4632a8baad390b12eef3e8c6 Mon Sep 17 00:00:00 2001
From: q66 <q66@chimera-linux.org>
Date: Thu, 20 Feb 2025 20:32:31 +0100
Subject: [PATCH 01/16] add chimera targets, always dynamic musl + static pie

---
 compiler/rustc_target/src/spec/base/linux_musl.rs     | 11 +++++++----
 compiler/rustc_target/src/spec/mod.rs                 |  9 +++++++++
 .../src/spec/targets/aarch64_chimera_linux_musl.rs    | 10 ++++++++++
 .../src/spec/targets/aarch64_unknown_linux_musl.rs    |  3 ---
 .../src/spec/targets/arm_chimera_linux_musleabihf.rs  | 10 ++++++++++
 .../src/spec/targets/arm_unknown_linux_musleabi.rs    |  2 --
 .../src/spec/targets/arm_unknown_linux_musleabihf.rs  |  2 --
 .../spec/targets/armv5te_unknown_linux_musleabi.rs    |  2 --
 .../spec/targets/armv7_chimera_linux_musleabihf.rs    | 10 ++++++++++
 .../src/spec/targets/armv7_unknown_linux_musleabi.rs  |  2 --
 .../spec/targets/armv7_unknown_linux_musleabihf.rs    |  2 --
 .../src/spec/targets/i586_unknown_linux_musl.rs       |  2 --
 .../src/spec/targets/i686_unknown_linux_musl.rs       |  2 --
 .../spec/targets/loongarch64_chimera_linux_musl.rs    | 10 ++++++++++
 .../spec/targets/loongarch64_unknown_linux_musl.rs    |  1 -
 .../src/spec/targets/powerpc64_chimera_linux_musl.rs  | 11 +++++++++++
 .../spec/targets/powerpc64le_chimera_linux_musl.rs    | 11 +++++++++++
 .../spec/targets/powerpc64le_unknown_linux_musl.rs    |  2 --
 .../src/spec/targets/powerpc_chimera_linux_musl.rs    | 10 ++++++++++
 .../src/spec/targets/riscv64_chimera_linux_musl.rs    | 10 ++++++++++
 .../src/spec/targets/x86_64_chimera_linux_musl.rs     | 10 ++++++++++
 .../src/spec/targets/x86_64_unknown_linux_musl.rs     |  2 --
 22 files changed, 108 insertions(+), 26 deletions(-)
 create mode 100644 compiler/rustc_target/src/spec/targets/aarch64_chimera_linux_musl.rs
 create mode 100644 compiler/rustc_target/src/spec/targets/arm_chimera_linux_musleabihf.rs
 create mode 100644 compiler/rustc_target/src/spec/targets/armv7_chimera_linux_musleabihf.rs
 create mode 100644 compiler/rustc_target/src/spec/targets/loongarch64_chimera_linux_musl.rs
 create mode 100644 compiler/rustc_target/src/spec/targets/powerpc64_chimera_linux_musl.rs
 create mode 100644 compiler/rustc_target/src/spec/targets/powerpc64le_chimera_linux_musl.rs
 create mode 100644 compiler/rustc_target/src/spec/targets/powerpc_chimera_linux_musl.rs
 create mode 100644 compiler/rustc_target/src/spec/targets/riscv64_chimera_linux_musl.rs
 create mode 100644 compiler/rustc_target/src/spec/targets/x86_64_chimera_linux_musl.rs

diff --git a/compiler/rustc_target/src/spec/base/linux_musl.rs b/compiler/rustc_target/src/spec/base/linux_musl.rs
index 1bef60240..9a2fc4bba 100644
--- a/compiler/rustc_target/src/spec/base/linux_musl.rs
+++ b/compiler/rustc_target/src/spec/base/linux_musl.rs
@@ -1,11 +1,14 @@
-use crate::spec::{LinkSelfContainedDefault, TargetOptions, base, crt_objects};
+use crate::spec::{TargetOptions, base};
 
 pub(crate) fn opts() -> TargetOptions {
     TargetOptions {
         env: "musl".into(),
-        pre_link_objects_self_contained: crt_objects::pre_musl_self_contained(),
-        post_link_objects_self_contained: crt_objects::post_musl_self_contained(),
-        link_self_contained: LinkSelfContainedDefault::InferredForMusl,
+        // use static pie by default
+        static_position_independent_executables: true,
+        // we want to link to default libraries in order to reliably
+        // get in the builtins; this will also link in libc, which
+        // we likewise want (and avoid hacks in the libc module)
+        no_default_libraries: false,
         ..base::linux::opts()
     }
 }
diff --git a/compiler/rustc_target/src/spec/mod.rs b/compiler/rustc_target/src/spec/mod.rs
index 07fb1ce63..846c5691c 100644
--- a/compiler/rustc_target/src/spec/mod.rs
+++ b/compiler/rustc_target/src/spec/mod.rs
@@ -1439,6 +1439,15 @@ macro_rules! supported_targets {
 }
 
 supported_targets! {
+    ("x86_64-chimera-linux-musl", x86_64_chimera_linux_musl),
+    ("arm-chimera-linux-musleabihf", arm_chimera_linux_musleabihf),
+    ("armv7-chimera-linux-musleabihf", armv7_chimera_linux_musleabihf),
+    ("aarch64-chimera-linux-musl", aarch64_chimera_linux_musl),
+    ("loongarch64-chimera-linux-musl", loongarch64_chimera_linux_musl),
+    ("powerpc-chimera-linux-musl", powerpc_chimera_linux_musl),
+    ("powerpc64-chimera-linux-musl", powerpc64_chimera_linux_musl),
+    ("powerpc64le-chimera-linux-musl", powerpc64le_chimera_linux_musl),
+    ("riscv64-chimera-linux-musl", riscv64_chimera_linux_musl),
     ("x86_64-unknown-linux-gnu", x86_64_unknown_linux_gnu),
     ("x86_64-unknown-linux-gnux32", x86_64_unknown_linux_gnux32),
     ("i686-unknown-linux-gnu", i686_unknown_linux_gnu),
diff --git a/compiler/rustc_target/src/spec/targets/aarch64_chimera_linux_musl.rs b/compiler/rustc_target/src/spec/targets/aarch64_chimera_linux_musl.rs
new file mode 100644
index 000000000..f553bc173
--- /dev/null
+++ b/compiler/rustc_target/src/spec/targets/aarch64_chimera_linux_musl.rs
@@ -0,0 +1,10 @@
+use crate::spec::Target;
+
+pub(crate) fn target() -> Target {
+    let mut base = super::aarch64_unknown_linux_musl::target();
+
+    base.llvm_target = "aarch64-chimera-linux-musl".into();
+    base.options.vendor = "chimera".into();
+
+    base
+}
diff --git a/compiler/rustc_target/src/spec/targets/aarch64_unknown_linux_musl.rs b/compiler/rustc_target/src/spec/targets/aarch64_unknown_linux_musl.rs
index 478726fbe..b7b345e56 100644
--- a/compiler/rustc_target/src/spec/targets/aarch64_unknown_linux_musl.rs
+++ b/compiler/rustc_target/src/spec/targets/aarch64_unknown_linux_musl.rs
@@ -14,9 +14,6 @@ pub(crate) fn target() -> Target {
         | SanitizerSet::MEMORY
         | SanitizerSet::THREAD;
 
-    // FIXME(compiler-team#422): musl targets should be dynamically linked by default.
-    base.crt_static_default = true;
-
     Target {
         llvm_target: "aarch64-unknown-linux-musl".into(),
         metadata: TargetMetadata {
diff --git a/compiler/rustc_target/src/spec/targets/arm_chimera_linux_musleabihf.rs b/compiler/rustc_target/src/spec/targets/arm_chimera_linux_musleabihf.rs
new file mode 100644
index 000000000..7822cc7e4
--- /dev/null
+++ b/compiler/rustc_target/src/spec/targets/arm_chimera_linux_musleabihf.rs
@@ -0,0 +1,10 @@
+use crate::spec::Target;
+
+pub(crate) fn target() -> Target {
+    let mut base = super::arm_unknown_linux_musleabihf::target();
+
+    base.llvm_target = "arm-chimera-linux-musleabihf".into();
+    base.options.vendor = "chimera".into();
+
+    base
+}
diff --git a/compiler/rustc_target/src/spec/targets/arm_unknown_linux_musleabi.rs b/compiler/rustc_target/src/spec/targets/arm_unknown_linux_musleabi.rs
index 3919a5e07..3d6c71942 100644
--- a/compiler/rustc_target/src/spec/targets/arm_unknown_linux_musleabi.rs
+++ b/compiler/rustc_target/src/spec/targets/arm_unknown_linux_musleabi.rs
@@ -20,8 +20,6 @@ pub(crate) fn target() -> Target {
             features: "+strict-align,+v6".into(),
             max_atomic_width: Some(64),
             mcount: "\u{1}mcount".into(),
-            // FIXME(compiler-team#422): musl targets should be dynamically linked by default.
-            crt_static_default: true,
             ..base::linux_musl::opts()
         },
     }
diff --git a/compiler/rustc_target/src/spec/targets/arm_unknown_linux_musleabihf.rs b/compiler/rustc_target/src/spec/targets/arm_unknown_linux_musleabihf.rs
index ca52e5b3c..1012b5b1a 100644
--- a/compiler/rustc_target/src/spec/targets/arm_unknown_linux_musleabihf.rs
+++ b/compiler/rustc_target/src/spec/targets/arm_unknown_linux_musleabihf.rs
@@ -20,8 +20,6 @@ pub(crate) fn target() -> Target {
             features: "+strict-align,+v6,+vfp2,-d32".into(),
             max_atomic_width: Some(64),
             mcount: "\u{1}mcount".into(),
-            // FIXME(compiler-team#422): musl targets should be dynamically linked by default.
-            crt_static_default: true,
             ..base::linux_musl::opts()
         },
     }
diff --git a/compiler/rustc_target/src/spec/targets/armv5te_unknown_linux_musleabi.rs b/compiler/rustc_target/src/spec/targets/armv5te_unknown_linux_musleabi.rs
index e67573962..feb507a01 100644
--- a/compiler/rustc_target/src/spec/targets/armv5te_unknown_linux_musleabi.rs
+++ b/compiler/rustc_target/src/spec/targets/armv5te_unknown_linux_musleabi.rs
@@ -20,8 +20,6 @@ pub(crate) fn target() -> Target {
             max_atomic_width: Some(32),
             mcount: "\u{1}mcount".into(),
             has_thumb_interworking: true,
-            // FIXME(compiler-team#422): musl targets should be dynamically linked by default.
-            crt_static_default: true,
             ..base::linux_musl::opts()
         },
     }
diff --git a/compiler/rustc_target/src/spec/targets/armv7_chimera_linux_musleabihf.rs b/compiler/rustc_target/src/spec/targets/armv7_chimera_linux_musleabihf.rs
new file mode 100644
index 000000000..de9b406b5
--- /dev/null
+++ b/compiler/rustc_target/src/spec/targets/armv7_chimera_linux_musleabihf.rs
@@ -0,0 +1,10 @@
+use crate::spec::Target;
+
+pub(crate) fn target() -> Target {
+    let mut base = super::armv7_unknown_linux_musleabihf::target();
+
+    base.llvm_target = "armv7-chimera-linux-musleabihf".into();
+    base.options.vendor = "chimera".into();
+
+    base
+}
diff --git a/compiler/rustc_target/src/spec/targets/armv7_unknown_linux_musleabi.rs b/compiler/rustc_target/src/spec/targets/armv7_unknown_linux_musleabi.rs
index 42fbf6f48..0ae29a58e 100644
--- a/compiler/rustc_target/src/spec/targets/armv7_unknown_linux_musleabi.rs
+++ b/compiler/rustc_target/src/spec/targets/armv7_unknown_linux_musleabi.rs
@@ -24,8 +24,6 @@ pub(crate) fn target() -> Target {
             features: "+v7,+thumb2,+soft-float,-neon".into(),
             max_atomic_width: Some(64),
             mcount: "\u{1}mcount".into(),
-            // FIXME(compiler-team#422): musl targets should be dynamically linked by default.
-            crt_static_default: true,
             ..base::linux_musl::opts()
         },
     }
diff --git a/compiler/rustc_target/src/spec/targets/armv7_unknown_linux_musleabihf.rs b/compiler/rustc_target/src/spec/targets/armv7_unknown_linux_musleabihf.rs
index a3ac0223c..ec43eebfc 100644
--- a/compiler/rustc_target/src/spec/targets/armv7_unknown_linux_musleabihf.rs
+++ b/compiler/rustc_target/src/spec/targets/armv7_unknown_linux_musleabihf.rs
@@ -23,8 +23,6 @@ pub(crate) fn target() -> Target {
             features: "+v7,+vfp3,-d32,+thumb2,-neon".into(),
             max_atomic_width: Some(64),
             mcount: "\u{1}mcount".into(),
-            // FIXME(compiler-team#422): musl targets should be dynamically linked by default.
-            crt_static_default: true,
             ..base::linux_musl::opts()
         },
     }
diff --git a/compiler/rustc_target/src/spec/targets/i586_unknown_linux_musl.rs b/compiler/rustc_target/src/spec/targets/i586_unknown_linux_musl.rs
index 42babb90d..87628fcad 100644
--- a/compiler/rustc_target/src/spec/targets/i586_unknown_linux_musl.rs
+++ b/compiler/rustc_target/src/spec/targets/i586_unknown_linux_musl.rs
@@ -5,7 +5,5 @@ pub(crate) fn target() -> Target {
     base.rustc_abi = None; // overwrite the SSE2 ABI set by the base target
     base.cpu = "pentium".into();
     base.llvm_target = "i586-unknown-linux-musl".into();
-    // FIXME(compiler-team#422): musl targets should be dynamically linked by default.
-    base.crt_static_default = true;
     base
 }
diff --git a/compiler/rustc_target/src/spec/targets/i686_unknown_linux_musl.rs b/compiler/rustc_target/src/spec/targets/i686_unknown_linux_musl.rs
index 47a7eb3d5..da1026485 100644
--- a/compiler/rustc_target/src/spec/targets/i686_unknown_linux_musl.rs
+++ b/compiler/rustc_target/src/spec/targets/i686_unknown_linux_musl.rs
@@ -11,8 +11,6 @@ pub(crate) fn target() -> Target {
     base.max_atomic_width = Some(64);
     base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-m32", "-Wl,-melf_i386"]);
     base.stack_probes = StackProbeType::Inline;
-    // FIXME(compiler-team#422): musl targets should be dynamically linked by default.
-    base.crt_static_default = true;
 
     // The unwinder used by i686-unknown-linux-musl, the LLVM libunwind
     // implementation, apparently relies on frame pointers existing... somehow.
diff --git a/compiler/rustc_target/src/spec/targets/loongarch64_chimera_linux_musl.rs b/compiler/rustc_target/src/spec/targets/loongarch64_chimera_linux_musl.rs
new file mode 100644
index 000000000..feb074cbb
--- /dev/null
+++ b/compiler/rustc_target/src/spec/targets/loongarch64_chimera_linux_musl.rs
@@ -0,0 +1,10 @@
+use crate::spec::Target;
+
+pub(crate) fn target() -> Target {
+    let mut base = super::loongarch64_unknown_linux_musl::target();
+
+    base.llvm_target = "loongarch64-chimera-linux-musl".into();
+    base.options.vendor = "chimera".into();
+
+    base
+}
diff --git a/compiler/rustc_target/src/spec/targets/loongarch64_unknown_linux_musl.rs b/compiler/rustc_target/src/spec/targets/loongarch64_unknown_linux_musl.rs
index d9010b1e4..2dafe15ee 100644
--- a/compiler/rustc_target/src/spec/targets/loongarch64_unknown_linux_musl.rs
+++ b/compiler/rustc_target/src/spec/targets/loongarch64_unknown_linux_musl.rs
@@ -18,7 +18,6 @@ pub(crate) fn target() -> Target {
             features: "+f,+d,+lsx".into(),
             llvm_abiname: "lp64d".into(),
             max_atomic_width: Some(64),
-            crt_static_default: false,
             supported_sanitizers: SanitizerSet::ADDRESS
                 | SanitizerSet::CFI
                 | SanitizerSet::LEAK
diff --git a/compiler/rustc_target/src/spec/targets/powerpc64_chimera_linux_musl.rs b/compiler/rustc_target/src/spec/targets/powerpc64_chimera_linux_musl.rs
new file mode 100644
index 000000000..c6cbe01b1
--- /dev/null
+++ b/compiler/rustc_target/src/spec/targets/powerpc64_chimera_linux_musl.rs
@@ -0,0 +1,11 @@
+use crate::spec::Target;
+
+pub(crate) fn target() -> Target {
+    let mut base = super::powerpc64_unknown_linux_musl::target();
+
+    base.llvm_target = "powerpc64-chimera-linux-musl".into();
+    base.abi = "".into(); // unfuck compilation of 90% of the ecosystem
+    base.options.vendor = "chimera".into();
+
+    base
+}
diff --git a/compiler/rustc_target/src/spec/targets/powerpc64le_chimera_linux_musl.rs b/compiler/rustc_target/src/spec/targets/powerpc64le_chimera_linux_musl.rs
new file mode 100644
index 000000000..464907708
--- /dev/null
+++ b/compiler/rustc_target/src/spec/targets/powerpc64le_chimera_linux_musl.rs
@@ -0,0 +1,11 @@
+use crate::spec::Target;
+
+pub(crate) fn target() -> Target {
+    let mut base = super::powerpc64le_unknown_linux_musl::target();
+
+    base.llvm_target = "powerpc64le-chimera-linux-musl".into();
+    base.abi = "".into(); // unfuck compilation of 90% of the ecosystem
+    base.options.vendor = "chimera".into();
+
+    base
+}
diff --git a/compiler/rustc_target/src/spec/targets/powerpc64le_unknown_linux_musl.rs b/compiler/rustc_target/src/spec/targets/powerpc64le_unknown_linux_musl.rs
index 26ee6a68c..1e0792115 100644
--- a/compiler/rustc_target/src/spec/targets/powerpc64le_unknown_linux_musl.rs
+++ b/compiler/rustc_target/src/spec/targets/powerpc64le_unknown_linux_musl.rs
@@ -8,8 +8,6 @@ pub(crate) fn target() -> Target {
     base.add_pre_link_args(LinkerFlavor::Gnu(Cc::Yes, Lld::No), &["-m64"]);
     base.max_atomic_width = Some(64);
     base.stack_probes = StackProbeType::Inline;
-    // FIXME(compiler-team#422): musl targets should be dynamically linked by default.
-    base.crt_static_default = true;
     base.abi = "elfv2".into();
     base.llvm_abiname = "elfv2".into();
 
diff --git a/compiler/rustc_target/src/spec/targets/powerpc_chimera_linux_musl.rs b/compiler/rustc_target/src/spec/targets/powerpc_chimera_linux_musl.rs
new file mode 100644
index 000000000..2ccb40cda
--- /dev/null
+++ b/compiler/rustc_target/src/spec/targets/powerpc_chimera_linux_musl.rs
@@ -0,0 +1,10 @@
+use crate::spec::Target;
+
+pub(crate) fn target() -> Target {
+    let mut base = super::powerpc_unknown_linux_musl::target();
+
+    base.llvm_target = "powerpc-chimera-linux-musl".into();
+    base.options.vendor = "chimera".into();
+
+    base
+}
diff --git a/compiler/rustc_target/src/spec/targets/riscv64_chimera_linux_musl.rs b/compiler/rustc_target/src/spec/targets/riscv64_chimera_linux_musl.rs
new file mode 100644
index 000000000..cad82f68b
--- /dev/null
+++ b/compiler/rustc_target/src/spec/targets/riscv64_chimera_linux_musl.rs
@@ -0,0 +1,10 @@
+use crate::spec::Target;
+
+pub(crate) fn target() -> Target {
+    let mut base = super::riscv64gc_unknown_linux_musl::target();
+
+    base.llvm_target = "riscv64-chimera-linux-musl".into();
+    base.options.vendor = "chimera".into();
+
+    base
+}
diff --git a/compiler/rustc_target/src/spec/targets/x86_64_chimera_linux_musl.rs b/compiler/rustc_target/src/spec/targets/x86_64_chimera_linux_musl.rs
new file mode 100644
index 000000000..a832e86bd
--- /dev/null
+++ b/compiler/rustc_target/src/spec/targets/x86_64_chimera_linux_musl.rs
@@ -0,0 +1,10 @@
+use crate::spec::Target;
+
+pub(crate) fn target() -> Target {
+    let mut base = super::x86_64_unknown_linux_musl::target();
+
+    base.llvm_target = "x86_64-chimera-linux-musl".into();
+    base.options.vendor = "chimera".into();
+
+    base
+}
diff --git a/compiler/rustc_target/src/spec/targets/x86_64_unknown_linux_musl.rs b/compiler/rustc_target/src/spec/targets/x86_64_unknown_linux_musl.rs
index cc5f88862..0203c776a 100644
--- a/compiler/rustc_target/src/spec/targets/x86_64_unknown_linux_musl.rs
+++ b/compiler/rustc_target/src/spec/targets/x86_64_unknown_linux_musl.rs
@@ -16,8 +16,6 @@ pub(crate) fn target() -> Target {
         | SanitizerSet::MEMORY
         | SanitizerSet::THREAD;
     base.supports_xray = true;
-    // FIXME(compiler-team#422): musl targets should be dynamically linked by default.
-    base.crt_static_default = true;
 
     Target {
         llvm_target: "x86_64-unknown-linux-musl".into(),
-- 
2.51.2

