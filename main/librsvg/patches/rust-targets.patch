commit 5c1b1fddd9f2190e939bc11e19aa5421705bb9ce
Author: Daniel Kolesa <daniel@octaforge.org>
Date:   Thu Jun 1 19:49:58 2023 +0200

    yolo

diff --git a/vendor/system-deps/src/lib.rs b/vendor/system-deps/src/lib.rs
index dc4c68a..bb2a3f9 100644
--- a/vendor/system-deps/src/lib.rs
+++ b/vendor/system-deps/src/lib.rs
@@ -842,29 +842,7 @@ impl Config {
     }
 
     fn check_cfg(&self, cfg: &cfg_expr::Expression) -> Result<bool, Error> {
-        use cfg_expr::{targets::get_builtin_target_by_triple, Predicate};
-
-        let target = self
-            .env
-            .get("TARGET")
-            .expect("no TARGET env variable defined");
-
-        let res = if let Some(target) = get_builtin_target_by_triple(&target) {
-            cfg.eval(|pred| match pred {
-                Predicate::Target(tp) => Some(tp.matches(target)),
-                _ => None,
-            })
-        } else {
-            // Attempt to parse the triple, the target is not an official builtin
-            let triple: cfg_expr::target_lexicon::Triple = target.parse().unwrap_or_else(|e| panic!("TARGET {} is not a builtin target, and it could not be parsed as a valid triplet: {}", target, e));
-
-            cfg.eval(|pred| match pred {
-                Predicate::Target(tp) => Some(tp.matches(&triple)),
-                _ => None,
-            })
-        };
-
-        res.ok_or_else(|| Error::UnsupportedCfg(cfg.original().to_string()))
+        Ok(true)
     }
 }
 
