From 0a16414b1018039befb3ea6caa092975256686a4 Mon Sep 17 00:00:00 2001
From: q66 <q66@chimera-linux.org>
Date: Sat, 23 Nov 2024 01:39:30 +0100
Subject: [PATCH 1/2] revert some of the location changes that were introduced

The libexec directory is a regression for us so revert to the
old location. Putting the lockfile in /run is also a regression
as it pollutes unmounted /run when manipulating a --root.
---
 doc/apk.8.scd  |  4 ++--
 src/database.c | 24 ++++++------------------
 src/package.c  |  2 +-
 3 files changed, 9 insertions(+), 21 deletions(-)

diff --git a/doc/apk.8.scd b/doc/apk.8.scd
index 7e8c43a..aa3ebec 100644
--- a/doc/apk.8.scd
+++ b/doc/apk.8.scd
@@ -398,11 +398,11 @@ The following options are available for all commands which generate APKv3 files.
 
 ## System files
 
-*/run/apk/db.lock*
+*/usr/lib/apk/db/lock*
 	A lock file used to allow only one concurrent write transaction on
 	the system.
 
-*/usr/libexec/apk*
+*/usr/lib/apk/exec*
 	Temporary directory for extraction and execution of package scripts
 	and triggers. Only used when memfd_create is not available
 
diff --git a/src/database.c b/src/database.c
index b0d9766..5309112 100644
--- a/src/database.c
+++ b/src/database.c
@@ -50,8 +50,7 @@ static const char * const apkindex_tar_gz = "APKINDEX.tar.gz";
 static const char * const apk_static_cache_dir = "var/cache/apk";
 static const char * const apk_world_file = "etc/apk/world";
 static const char * const apk_arch_file = "etc/apk/arch";
-static const char * const apk_lock_file = "run/apk/db.lock";
-static const char * const apk_legacy_lock_file = "lib/apk/db/lock";
+static const char * const apk_lock_file = "usr/lib/apk/db/lock";
 
 static struct apk_db_acl *apk_default_acl_dir, *apk_default_acl_file;
 
@@ -1743,22 +1742,11 @@ int apk_db_open(struct apk_database *db, struct apk_ctx *ac)
 	if (ac->open_flags & APK_OPENF_WRITE) {
 		msg = "Unable to lock database";
 		db->lock_fd = openat(db->root_fd, apk_lock_file,
-				     O_RDWR | O_CLOEXEC, 0600);
-		// Check if old lock file exists
-		if (db->lock_fd < 0 && errno == ENOENT) {
-			db->lock_fd = openat(db->root_fd, apk_legacy_lock_file,
-					     O_RDWR | O_CLOEXEC, 0600);
-		}
-		// If it still doesn't exist, try to create and use
-		// the new lock file
-		if (db->lock_fd < 0 && errno == ENOENT) {
-			apk_make_dirs(db->root_fd, "run/apk", 0755, 0755);
-			db->lock_fd = openat(db->root_fd, apk_lock_file,
-					     O_CREAT | O_RDWR | O_CLOEXEC, 0600);
-		}
-		if (db->lock_fd < 0) goto ret_errno;
-
-		if (flock(db->lock_fd, LOCK_EX | LOCK_NB) < 0) {
+				     O_CREAT | O_RDWR | O_CLOEXEC, 0600);
+		if (db->lock_fd < 0) {
+			if (!(ac->open_flags & APK_OPENF_CREATE))
+				goto ret_errno;
+		} else if (flock(db->lock_fd, LOCK_EX | LOCK_NB) < 0) {
 			struct sigaction sa, old_sa;
 
 			if (!ac->lock_wait) goto ret_errno;
diff --git a/src/package.c b/src/package.c
index d10cb8a..3fd5ff2 100644
--- a/src/package.c
+++ b/src/package.c
@@ -752,7 +752,7 @@ int apk_ipkg_run_script(struct apk_installed_package *ipkg,
 {
 	// When memfd_create is not available store the script in libexecdir/apk
 	// and hope it allows executing.
-	static const char script_exec_dir[] = RELATIVE_LIBEXECDIR "/apk";
+	static const char script_exec_dir[] = "usr/lib/apk/exec";
 	struct apk_out *out = &db->ctx->out;
 	struct apk_package *pkg = ipkg->pkg;
 	char fn[PATH_MAX];
-- 
2.47.0

