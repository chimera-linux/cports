remove root chown tests as chown-ing inside container fails

--
--- a/src/os/root_unix_test.go
+++ b/src/os/root_unix_test.go
@@ -15,82 +15,6 @@
 	"testing"
 )

-func TestRootChown(t *testing.T) {
-	if runtime.GOOS == "wasip1" {
-		t.Skip("Chown not supported on " + runtime.GOOS)
-	}
-
-	// Look up the current default uid/gid.
-	f := newFile(t)
-	dir, err := f.Stat()
-	if err != nil {
-		t.Fatal(err)
-	}
-	sys := dir.Sys().(*syscall.Stat_t)
-
-	groups, err := os.Getgroups()
-	if err != nil {
-		t.Fatal(err)
-	}
-	groups = append(groups, os.Getgid())
-	for _, test := range rootTestCases {
-		test.run(t, func(t *testing.T, target string, root *os.Root) {
-			if target != "" {
-				if err := os.WriteFile(target, nil, 0o666); err != nil {
-					t.Fatal(err)
-				}
-			}
-			for _, gid := range groups {
-				err := root.Chown(test.open, -1, gid)
-				if errEndsTest(t, err, test.wantError, "root.Chown(%q, -1, %v)", test.open, gid) {
-					return
-				}
-				checkUidGid(t, target, int(sys.Uid), gid)
-			}
-		})
-	}
-}
-
-func TestRootLchown(t *testing.T) {
-	if runtime.GOOS == "wasip1" {
-		t.Skip("Lchown not supported on " + runtime.GOOS)
-	}
-
-	// Look up the current default uid/gid.
-	f := newFile(t)
-	dir, err := f.Stat()
-	if err != nil {
-		t.Fatal(err)
-	}
-	sys := dir.Sys().(*syscall.Stat_t)
-
-	groups, err := os.Getgroups()
-	if err != nil {
-		t.Fatal(err)
-	}
-	groups = append(groups, os.Getgid())
-	for _, test := range rootTestCases {
-		test.run(t, func(t *testing.T, target string, root *os.Root) {
-			wantError := test.wantError
-			if test.ltarget != "" {
-				wantError = false
-				target = filepath.Join(root.Name(), test.ltarget)
-			} else if target != "" {
-				if err := os.WriteFile(target, nil, 0o666); err != nil {
-					t.Fatal(err)
-				}
-			}
-			for _, gid := range groups {
-				err := root.Lchown(test.open, -1, gid)
-				if errEndsTest(t, err, wantError, "root.Lchown(%q, -1, %v)", test.open, gid) {
-					return
-				}
-				checkUidGid(t, target, int(sys.Uid), gid)
-			}
-		})
-	}
-}
-
 func TestRootConsistencyChown(t *testing.T) {
 	if runtime.GOOS == "wasip1" {
 		t.Skip("Chown not supported on " + runtime.GOOS)
