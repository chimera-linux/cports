diff --git a/cmake/CheckAlignment.c b/cmake/CheckAlignment.c
index cf9c52dff..c589bee42 100644
--- a/cmake/CheckAlignment.c
+++ b/cmake/CheckAlignment.c
@@ -38,7 +38,7 @@ int prevent_optimization(unsigned char*p, int size) {
 #define int64_pat_sz  18
 #define voidp_pat_sz  18
 #define double_pat_sz  19
-int main() {
+int main(int argc, char *argv[]) {
 
    static const unsigned char int64_alignment[int64_pat_sz] = {
          'I', 'N','T','6','4','_','A','L','I','G','N','M','E','N','T','=',
@@ -55,8 +55,10 @@ int main() {
          ALIGNOF(double), 0x0
    };
 
-   //Not used, prevent optimization
-   return prevent_optimization((unsigned char*)int64_alignment, int64_pat_sz) +
-          prevent_optimization((unsigned char*)voidp_alignment, voidp_pat_sz) +
-          prevent_optimization((unsigned char*)double_alignment, double_pat_sz);
+  int require = 0;
+  require += int64_alignment[argc];
+  require += voidp_alignment[argc];
+  require += double_alignment[argc];
+  (void)argv;
+  return require;
 }
diff --git a/cmake/AlignOf.cmake b/cmake/AlignOf.cmake
index 8234033e7..c2956d12a 100644
--- a/cmake/AlignOf.cmake
+++ b/cmake/AlignOf.cmake
@@ -5,13 +5,10 @@ function(alignof VAR_ALIGNOF_INT64_T VAR_ALIGNOF_VOIDP VAR_ALIGNOF_DOUBLE)
       # Compile alignment checker source
       set(alignof_checker_target ${CMAKE_BINARY_DIR}/${CMAKE_FILES_DIRECTORY}/CheckAlignOf.bin)
       set(alignof_checker_source_dir ${CMAKE_CURRENT_LIST_DIR})
-      SET(CMAKE_TRY_COMPILE_TARGET_TYPE_SAVE ${CMAKE_TRY_COMPILE_TARGET_TYPE})
-      SET(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
       try_compile(alignof_checker_ok
          ${CMAKE_BINARY_DIR}
          ${alignof_checker_source_dir}/CheckAlignment.c
          COPY_FILE ${alignof_checker_target})
-      SET(CMAKE_TRY_COMPILE_TARGET_TYPE ${CMAKE_TRY_COMPILE_TARGET_TYPE_SAVE})
       
       if(alignof_checker_ok)
          # Match 1,4, 8,16,32 or 64 alignments
diff --git a/cmake/CheckFloatingPointFormat.cmake b/cmake/CheckFloatingPointFormat.cmake
index 491d1023f..89029ee77 100644
--- a/cmake/CheckFloatingPointFormat.cmake
+++ b/cmake/CheckFloatingPointFormat.cmake
@@ -6,12 +6,9 @@ MACRO(UB_CHECK_FLOATING_POINT_FORMAT IEEE754_FLOATS FLOAT_BYTES_BIGENDIAN FLOAT_
 
 		SET(UB_CHECK_FLOATING_POINT_FORMAT_TARGET
 			"${CMAKE_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/CheckFloatingPointFormat.bin")
-		SET(CMAKE_TRY_COMPILE_TARGET_TYPE_SAVE ${CMAKE_TRY_COMPILE_TARGET_TYPE})
-		SET(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY) # added to silence Windows Defender
 		TRY_COMPILE(HAVE_${IEEE754_FLOATS} "${CMAKE_BINARY_DIR}"
 			"${UB_DIRECTORY_OF_CHECK_FLOATING_POINT_FORMAT_SCRIPT}/CheckFloatingPointFormat.c"
 			COPY_FILE "${UB_CHECK_FLOATING_POINT_FORMAT_TARGET}")
-		SET(CMAKE_TRY_COMPILE_TARGET_TYPE ${CMAKE_TRY_COMPILE_TARGET_TYPE_SAVE})
 
 		IF(HAVE_${IEEE754_FLOATS})
 			FILE(STRINGS "${UB_CHECK_FLOATING_POINT_FORMAT_TARGET}"
diff --git a/cmake/Config.cmake b/cmake/Config.cmake
index d1424196e..75cfb6fa2 100644
--- a/cmake/Config.cmake
+++ b/cmake/Config.cmake
@@ -123,8 +123,6 @@ set(CMAKE_EXTRA_INCLUDE_FILES ${CMAKE_EXTRA_INCLUDE_FILES} math.h wchar.h)
 
 ################
 # Types
-SET(CMAKE_TRY_COMPILE_TARGET_TYPE_SAVE ${CMAKE_TRY_COMPILE_TARGET_TYPE})
-SET(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY) # Silence Win Defender
 check_type_size("int" SIZEOF_INT)
 check_type_size("long" SIZEOF_LONG)
 check_type_size("void *" SIZEOF_VOIDP)
@@ -146,7 +144,6 @@ if(HAVE_ZLIB_H)
     set(HAVE_Z_CRC_T 1)
   endif()
 endif()
-SET(CMAKE_TRY_COMPILE_TARGET_TYPE ${CMAKE_TRY_COMPILE_TARGET_TYPE_SAVE})
 
 include(AlignOf)
 alignof(ALIGNOF_INT64_T ALIGNOF_VOIDP ALIGNOF_DOUBLE)
diff --git a/cmake/Ports.cmake b/cmake/Ports.cmake
index afd9ee659..566afb8f8 100644
--- a/cmake/Ports.cmake
+++ b/cmake/Ports.cmake
@@ -116,10 +116,7 @@ else()
   # of CMAKE_<LANG>_BYTE_ORDER is non-empty only if all architectures share the same byte
   # order.
   include(TestBigEndian)
-  SET(CMAKE_TRY_COMPILE_TARGET_TYPE_SAVE ${CMAKE_TRY_COMPILE_TARGET_TYPE})
-  SET(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)
   TEST_BIG_ENDIAN(WORDS_BIGENDIAN)
-  SET(CMAKE_TRY_COMPILE_TARGET_TYPE ${CMAKE_TRY_COMPILE_TARGET_TYPE_SAVE})
 endif()
 
 include(CheckFloatingPointFormat)
