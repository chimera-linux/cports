commit ba74013697bdea98edee275bd5cf2b937be771d6
Author: q66 <q66@chimera-linux.org>
Date:   Wed Dec 20 20:04:45 2023 +0100

    remove strncpy/stpncpy overlap checks for the time being
    
    The logic here is fundamentally wrong as strncpy may not copy
    full given n characters, but only at most that (if the source
    string is shorter, it will only copy the source string). This
    results in false positive checks if the given source is short
    and the buffers happen to overlap by some of the given chars.

diff --git a/include/string.h b/include/string.h
index 2f2d185..2ede429 100644
--- a/include/string.h
+++ b/include/string.h
@@ -189,9 +189,6 @@ _FORTIFY_FN(stpncpy) char *stpncpy(char * _FORTIFY_POS0 __d, const char *__s,
 #if __has_builtin(__builtin___stpncpy_chk) && USE_NATIVE_CHK
 	return __builtin___stpncpy_chk(__d, __s, __n, __fh_bos(__d, 0));
 #else
-	if (__fh_overlap(__d, __s, __n))
-		__builtin_trap();
-
 	__fh_size_t __b = __fh_bos(__d, 0);
 	if (__n > __b && strlen(__s) + 1 > __b)
 		__builtin_trap();
@@ -290,9 +287,6 @@ _FORTIFY_FN(strncpy) char *strncpy(char * _FORTIFY_POS0 __d,
 #if __has_builtin(__builtin___strncpy_chk) && USE_NATIVE_CHK
 	return __builtin___strncpy_chk(__d, __s, __n, __fh_bos(__d, 0));
 #else
-	if (__fh_overlap(__d, __s, __n))
-		__builtin_trap();
-
 	__fh_size_t __b = __fh_bos(__d, 0);
 	if (__n > __b)
 		__builtin_trap();
diff --git a/tests/test_stpncpy_overwrite_over.c b/tests/test_stpncpy_overwrite_over.c
index e66d8d3..e323260 100644
--- a/tests/test_stpncpy_overwrite_over.c
+++ b/tests/test_stpncpy_overwrite_over.c
@@ -3,6 +3,7 @@
 #include <string.h>
 
 int main(int argc, char** argv) {
+#if 0
   char buffer[9] = {'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', '\0'};
   puts(buffer);
 
@@ -12,4 +13,5 @@ int main(int argc, char** argv) {
 
   puts(buffer);
   return ret;
+#endif
 }
diff --git a/tests/test_stpncpy_overwrite_under.c b/tests/test_stpncpy_overwrite_under.c
index 5625ff8..efc79ec 100644
--- a/tests/test_stpncpy_overwrite_under.c
+++ b/tests/test_stpncpy_overwrite_under.c
@@ -3,6 +3,7 @@
 #include <string.h>
 
 int main(int argc, char** argv) {
+#if 0
   char buffer[9] = {'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', '\0'};
   puts(buffer);
 
@@ -12,4 +13,5 @@ int main(int argc, char** argv) {
 
   puts(buffer);
   return ret;
+#endif
 }
diff --git a/tests/test_strncpy_overwrite_over.c b/tests/test_strncpy_overwrite_over.c
index d584bcc..29abed8 100644
--- a/tests/test_strncpy_overwrite_over.c
+++ b/tests/test_strncpy_overwrite_over.c
@@ -3,6 +3,7 @@
 #include <string.h>
 
 int main(int argc, char** argv) {
+#if 0
   char buffer[9] = {'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', '\0'};
   puts(buffer);
 
@@ -12,4 +13,5 @@ int main(int argc, char** argv) {
 
   puts(buffer);
   return ret;
+#endif
 }
diff --git a/tests/test_strncpy_overwrite_under.c b/tests/test_strncpy_overwrite_under.c
index f554b28..fdf01e3 100644
--- a/tests/test_strncpy_overwrite_under.c
+++ b/tests/test_strncpy_overwrite_under.c
@@ -3,6 +3,7 @@
 #include <string.h>
 
 int main(int argc, char** argv) {
+#if 0
   char buffer[9] = {'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', '\0'};
   puts(buffer);
 
@@ -12,4 +13,5 @@ int main(int argc, char** argv) {
 
   puts(buffer);
   return ret;
+#endif
 }
