commit 6d95bfa7d6654b35b8881da1c3949e922a9acf59
Author: q66 <q66@chimera-linux.org>
Date:   Sun Sep 3 16:27:40 2023 +0200

    treat dummy backend as a regular backend

diff --git a/src/exec_utils.cc b/src/exec_utils.cc
index 49918be..85ffa33 100644
--- a/src/exec_utils.cc
+++ b/src/exec_utils.cc
@@ -275,13 +275,25 @@ fail:
 }
 
 /* dummy "service manager" child process with none backend */
-static void srv_dummy() {
+static void srv_dummy(unsigned int uid) {
     /* block all signals except the ones we need to terminate */
     sigset_t mask;
     sigfillset(&mask);
     /* kill/stop are ignored, but term is not */
     sigdelset(&mask, SIGTERM);
     sigprocmask(SIG_SETMASK, &mask, nullptr);
+    /* mark as ready */
+    char path[4096];
+    std::snprintf(
+        path, sizeof(path), "%s/%s/%u/ready", RUN_PATH, SOCK_DIR, uid
+    );
+    FILE *ready = std::fopen(path, "w");
+    if (!ready) {
+        perror("srv: could not open readiness fifo");
+        exit(1);
+    }
+    std::fprintf(ready, "boop\n");
+    std::fclose(ready);
     /* this will sleep until a termination signal wakes it */
     pause();
     /* in which case just exit */
@@ -320,7 +332,7 @@ void srv_child(login &lgn, char const *backend) {
     }
     /* dummy service manager if requested */
     if (!backend) {
-        srv_dummy();
+        srv_dummy(lgn.uid);
         return;
     }
     /* change directory to home, fall back to / or error */
diff --git a/src/turnstiled.cc b/src/turnstiled.cc
index 71f8372..6f466ed 100644
--- a/src/turnstiled.cc
+++ b/src/turnstiled.cc
@@ -134,51 +134,46 @@ static bool srv_start(login &lgn) {
             return false;
         }
     }
-    bool has_backend = !cdata->disable && (
-        (lgn.uid != 0) || cdata->root_session
-    );
     /* set up login dir */
-    if (has_backend) {
-        print_dbg("srv: create login dir for %u", lgn.uid);
-        /* make the directory itself */
-        lgn.dirfd = dir_make_at(userv_dirfd, uidbuf, 0700);
-        if (lgn.dirfd < 0) {
-            print_err(
-                "srv: failed to make login dir for %u (%s)",
-                lgn.uid, strerror(errno)
-            );
-            return false;
-        }
-        /* ensure it's owned by the user */
-        if (fchownat(
-            userv_dirfd, uidbuf, lgn.uid, lgn.gid, AT_SYMLINK_NOFOLLOW
-        ) || fcntl(lgn.dirfd, F_SETFD, FD_CLOEXEC)) {
-            print_err(
-                "srv: login dir setup failed for %u (%s)",
-                lgn.uid, strerror(errno)
-            );
-            lgn.remove_sdir();
-            return false;
-        }
-        print_dbg("srv: create readiness pipe");
+    print_dbg("srv: create login dir for %u", lgn.uid);
+    /* make the directory itself */
+    lgn.dirfd = dir_make_at(userv_dirfd, uidbuf, 0700);
+    if (lgn.dirfd < 0) {
+        print_err(
+            "srv: failed to make login dir for %u (%s)",
+            lgn.uid, strerror(errno)
+        );
+        return false;
+    }
+    /* ensure it's owned by the user */
+    if (fchownat(
+        userv_dirfd, uidbuf, lgn.uid, lgn.gid, AT_SYMLINK_NOFOLLOW
+    ) || fcntl(lgn.dirfd, F_SETFD, FD_CLOEXEC)) {
+        print_err(
+            "srv: login dir setup failed for %u (%s)",
+            lgn.uid, strerror(errno)
+        );
+        lgn.remove_sdir();
+        return false;
+    }
+    print_dbg("srv: create readiness pipe");
+    unlinkat(lgn.dirfd, "ready", 0);
+    if (mkfifoat(lgn.dirfd, "ready", 0700) < 0) {
+        print_err("srv: failed to make ready pipe (%s)", strerror(errno));
+        return false;
+    }
+    /* ensure it's owned by user too, and open in nonblocking mode */
+    if (fchownat(
+        lgn.dirfd, "ready", lgn.uid, lgn.gid, AT_SYMLINK_NOFOLLOW
+    ) || ((lgn.userpipe = openat(
+        lgn.dirfd, "ready", O_NONBLOCK | O_RDONLY
+    )) < 0)) {
+        print_err(
+            "srv: failed to set up ready pipe (%s)", strerror(errno)
+        );
         unlinkat(lgn.dirfd, "ready", 0);
-        if (mkfifoat(lgn.dirfd, "ready", 0700) < 0) {
-            print_err("srv: failed to make ready pipe (%s)", strerror(errno));
-            return false;
-        }
-        /* ensure it's owned by user too, and open in nonblocking mode */
-        if (fchownat(
-            lgn.dirfd, "ready", lgn.uid, lgn.gid, AT_SYMLINK_NOFOLLOW
-        ) || ((lgn.userpipe = openat(
-            lgn.dirfd, "ready", O_NONBLOCK | O_RDONLY
-        )) < 0)) {
-            print_err(
-                "srv: failed to set up ready pipe (%s)", strerror(errno)
-            );
-            unlinkat(lgn.dirfd, "ready", 0);
-            lgn.remove_sdir();
-            return false;
-        }
+        lgn.remove_sdir();
+        return false;
     }
     /* set up the timer, issue SIGLARM when it fires */
     print_dbg("srv: timer set");
@@ -208,20 +203,17 @@ static bool srv_start(login &lgn) {
         close(sigpipe[0]);
         close(sigpipe[1]);
         /* and run the login */
+        bool has_backend = !cdata->disable && (
+            (lgn.uid != 0) || cdata->root_session
+        );
         srv_child(lgn, has_backend ? cdata->backend.data() : nullptr);
         exit(1);
     } else if (pid < 0) {
         print_err("srv: fork failed (%s)", strerror(errno));
         return false;
     }
-    /* close the write end on our side */
     lgn.srv_pending = false;
     lgn.srv_pid = pid;
-    if (lgn.userpipe < 0) {
-        /* disabled */
-        return srv_boot(lgn, nullptr);
-    }
-    /* otherwise queue the pipe */
     lgn.pipe_queued = true;
     return true;
 }
